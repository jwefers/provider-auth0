// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FormInitParameters struct {

	// (String) Submission configuration of the form. (JSON encoded)
	// Submission configuration of the form. (JSON encoded)
	Ending *string `json:"ending,omitempty" tf:"ending,omitempty"`

	// (Block List) Language specific configuration for the form. (see below for nested schema)
	// Language specific configuration for the form.
	Languages []LanguagesInitParameters `json:"languages,omitempty" tf:"languages,omitempty"`

	// (Block List) Message specific configuration for the form. (see below for nested schema)
	// Message specific configuration for the form.
	Messages []MessagesInitParameters `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String) Name of the form.
	// Name of the form.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Nodes of the form. (JSON encoded)
	// Nodes of the form. (JSON encoded)
	Nodes *string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// (String) Input setup of the form. (JSON encoded)
	// Input setup of the form. (JSON encoded)
	Start *string `json:"start,omitempty" tf:"start,omitempty"`

	// (String) Style specific configuration for the form. (JSON encoded)
	// Style specific configuration for the form. (JSON encoded)
	Style *string `json:"style,omitempty" tf:"style,omitempty"`

	// (String) Translations of the form. (JSON encoded)
	// Translations of the form. (JSON encoded)
	Translations *string `json:"translations,omitempty" tf:"translations,omitempty"`
}

type FormObservation struct {

	// (String) Submission configuration of the form. (JSON encoded)
	// Submission configuration of the form. (JSON encoded)
	Ending *string `json:"ending,omitempty" tf:"ending,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List) Language specific configuration for the form. (see below for nested schema)
	// Language specific configuration for the form.
	Languages []LanguagesObservation `json:"languages,omitempty" tf:"languages,omitempty"`

	// (Block List) Message specific configuration for the form. (see below for nested schema)
	// Message specific configuration for the form.
	Messages []MessagesObservation `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String) Name of the form.
	// Name of the form.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Nodes of the form. (JSON encoded)
	// Nodes of the form. (JSON encoded)
	Nodes *string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// (String) Input setup of the form. (JSON encoded)
	// Input setup of the form. (JSON encoded)
	Start *string `json:"start,omitempty" tf:"start,omitempty"`

	// (String) Style specific configuration for the form. (JSON encoded)
	// Style specific configuration for the form. (JSON encoded)
	Style *string `json:"style,omitempty" tf:"style,omitempty"`

	// (String) Translations of the form. (JSON encoded)
	// Translations of the form. (JSON encoded)
	Translations *string `json:"translations,omitempty" tf:"translations,omitempty"`
}

type FormParameters struct {

	// (String) Submission configuration of the form. (JSON encoded)
	// Submission configuration of the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Ending *string `json:"ending,omitempty" tf:"ending,omitempty"`

	// (Block List) Language specific configuration for the form. (see below for nested schema)
	// Language specific configuration for the form.
	// +kubebuilder:validation:Optional
	Languages []LanguagesParameters `json:"languages,omitempty" tf:"languages,omitempty"`

	// (Block List) Message specific configuration for the form. (see below for nested schema)
	// Message specific configuration for the form.
	// +kubebuilder:validation:Optional
	Messages []MessagesParameters `json:"messages,omitempty" tf:"messages,omitempty"`

	// (String) Name of the form.
	// Name of the form.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Nodes of the form. (JSON encoded)
	// Nodes of the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Nodes *string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// (String) Input setup of the form. (JSON encoded)
	// Input setup of the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Start *string `json:"start,omitempty" tf:"start,omitempty"`

	// (String) Style specific configuration for the form. (JSON encoded)
	// Style specific configuration for the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Style *string `json:"style,omitempty" tf:"style,omitempty"`

	// (String) Translations of the form. (JSON encoded)
	// Translations of the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Translations *string `json:"translations,omitempty" tf:"translations,omitempty"`
}

type LanguagesInitParameters struct {

	// (String) Default language for the form.
	// Default language for the form.
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Primary language for the form.
	// Primary language for the form.
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`
}

type LanguagesObservation struct {

	// (String) Default language for the form.
	// Default language for the form.
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Primary language for the form.
	// Primary language for the form.
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`
}

type LanguagesParameters struct {

	// (String) Default language for the form.
	// Default language for the form.
	// +kubebuilder:validation:Optional
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String) Primary language for the form.
	// Primary language for the form.
	// +kubebuilder:validation:Optional
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`
}

type MessagesInitParameters struct {

	// (String) Custom message for the form. (JSON encoded)
	// Custom message for the form. (JSON encoded)
	Custom *string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (String) Error message for the form. (JSON encoded)
	// Error message for the form. (JSON encoded)
	Errors *string `json:"errors,omitempty" tf:"errors,omitempty"`
}

type MessagesObservation struct {

	// (String) Custom message for the form. (JSON encoded)
	// Custom message for the form. (JSON encoded)
	Custom *string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (String) Error message for the form. (JSON encoded)
	// Error message for the form. (JSON encoded)
	Errors *string `json:"errors,omitempty" tf:"errors,omitempty"`
}

type MessagesParameters struct {

	// (String) Custom message for the form. (JSON encoded)
	// Custom message for the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Custom *string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (String) Error message for the form. (JSON encoded)
	// Error message for the form. (JSON encoded)
	// +kubebuilder:validation:Optional
	Errors *string `json:"errors,omitempty" tf:"errors,omitempty"`
}

// FormSpec defines the desired state of Form
type FormSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FormParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FormInitParameters `json:"initProvider,omitempty"`
}

// FormStatus defines the observed state of Form.
type FormStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FormObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Form is the Schema for the Forms API. With this resource, you can create and manage Forms for a tenant.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Form struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   FormSpec   `json:"spec"`
	Status FormStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FormList contains a list of Forms
type FormList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Form `json:"items"`
}

// Repository type metadata.
var (
	Form_Kind             = "Form"
	Form_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Form_Kind}.String()
	Form_KindAPIVersion   = Form_Kind + "." + CRDGroupVersion.String()
	Form_GroupVersionKind = CRDGroupVersion.WithKind(Form_Kind)
)

func init() {
	SchemeBuilder.Register(&Form{}, &FormList{})
}
