// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SinkInitParameters struct {

	// (String) The AWS Account ID.
	// The AWS Account ID.
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// (String) Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
	// Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
	AwsPartnerEventSource *string `json:"awsPartnerEventSource,omitempty" tf:"aws_partner_event_source,omitempty"`

	// east-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, me-south-1, sa-east-1, us-gov-east-1, us-gov-west-1, us-east-1, us-east-2, us-west-1, us-west-2.
	// The region in which the EventBridge event source will be created. Possible values: `ap-east-1`, `ap-northeast-1`, `ap-northeast-2`, `ap-northeast-3`, `ap-south-1`, `ap-southeast-1`, `ap-southeast-2`, `ca-central-1`, `cn-north-1`, `cn-northwest-1`, `eu-central-1`, `eu-north-1`, `eu-west-1`, `eu-west-2`, `eu-west-3`, `me-south-1`, `sa-east-1`, `us-gov-east-1`, `us-gov-west-1`, `us-east-1`, `us-east-2`, `us-west-1`, `us-west-2`.
	AwsRegion *string `json:"awsRegion,omitempty" tf:"aws_region,omitempty"`

	// (String) Name of the Partner Topic to be used with Azure. Generally should not be specified.
	// Name of the Partner Topic to be used with Azure. Generally should not be specified.
	AzurePartnerTopic *string `json:"azurePartnerTopic,omitempty" tf:"azure_partner_topic,omitempty"`

	// (String) The Azure region code. Possible values: australiacentral, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, southafricanorth, southcentralus, southeastasia, southindia, switzerlandnorth, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.
	// The Azure region code. Possible values: `australiacentral`, `australiaeast`, `australiasoutheast`, `brazilsouth`, `canadacentral`, `canadaeast`, `centralindia`, `centralus`, `eastasia`, `eastus`, `eastus2`, `francecentral`, `germanywestcentral`, `japaneast`, `japanwest`, `koreacentral`, `koreasouth`, `northcentralus`, `northeurope`, `norwayeast`, `southafricanorth`, `southcentralus`, `southeastasia`, `southindia`, `switzerlandnorth`, `uaenorth`, `uksouth`, `ukwest`, `westcentralus`, `westeurope`, `westindia`, `westus`, `westus2`.
	AzureRegion *string `json:"azureRegion,omitempty" tf:"azure_region,omitempty"`

	// (String) The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
	// The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
	AzureResourceGroup *string `json:"azureResourceGroup,omitempty" tf:"azure_resource_group,omitempty"`

	// (String) The unique alphanumeric string that identifies your Azure subscription.
	// The unique alphanumeric string that identifies your Azure subscription.
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty" tf:"azure_subscription_id,omitempty"`

	// (String, Sensitive) The Datadog API key.
	// The Datadog API key.
	DatadogAPIKeySecretRef *v1.SecretKeySelector `json:"datadogApiKeySecretRef,omitempty" tf:"-"`

	// (String) The Datadog region. Possible values: us, eu, us3, us5.
	// The Datadog region. Possible values: `us`, `eu`, `us3`, `us5`.
	DatadogRegion *string `json:"datadogRegion,omitempty" tf:"datadog_region,omitempty"`

	// (String, Sensitive) Sent in the HTTP "Authorization" header with each request.
	// Sent in the HTTP "Authorization" header with each request.
	HTTPAuthorizationSecretRef *v1.SecretKeySelector `json:"httpAuthorizationSecretRef,omitempty" tf:"-"`

	// (String) The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
	// The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
	HTTPContentFormat *string `json:"httpContentFormat,omitempty" tf:"http_content_format,omitempty"`

	// Type" header to send over HTTP. Common value is "application/json".
	// The "Content-Type" header to send over HTTP. Common value is "application/json".
	HTTPContentType *string `json:"httpContentType,omitempty" tf:"http_content_type,omitempty"`

	// (List of Map of String) Additional HTTP headers to be included as part of the HTTP request.
	// Additional HTTP headers to be included as part of the HTTP request.
	HTTPCustomHeaders []map[string]*string `json:"httpCustomHeaders,omitempty" tf:"http_custom_headers,omitempty"`

	// (String) The HTTP endpoint to send streaming logs.
	// The HTTP endpoint to send streaming logs.
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// (String) The Mixpanel project ID, found on the Project Settings page.
	// The Mixpanel project ID, found on the Project Settings page.
	MixpanelProjectID *string `json:"mixpanelProjectId,omitempty" tf:"mixpanel_project_id,omitempty"`

	// (String) The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
	// The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
	MixpanelRegion *string `json:"mixpanelRegion,omitempty" tf:"mixpanel_region,omitempty"`

	// (String, Sensitive) The Mixpanel Service Account password.
	// The Mixpanel Service Account password.
	MixpanelServiceAccountPasswordSecretRef *v1.SecretKeySelector `json:"mixpanelServiceAccountPasswordSecretRef,omitempty" tf:"-"`

	// (String) The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
	// The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
	MixpanelServiceAccountUsername *string `json:"mixpanelServiceAccountUsername,omitempty" tf:"mixpanel_service_account_username,omitempty"`

	// (String, Sensitive) The Segment Write Key.
	// The [Segment Write Key](https://segment.com/docs/connections/find-writekey/).
	SegmentWriteKeySecretRef *v1.SecretKeySelector `json:"segmentWriteKeySecretRef,omitempty" tf:"-"`

	// (String) The Splunk domain name.
	// The Splunk domain name.
	SplunkDomain *string `json:"splunkDomain,omitempty" tf:"splunk_domain,omitempty"`

	// (String) The Splunk port.
	// The Splunk port.
	SplunkPort *string `json:"splunkPort,omitempty" tf:"splunk_port,omitempty"`

	// signed certificates.
	// This toggle should be turned off when using self-signed certificates.
	SplunkSecure *bool `json:"splunkSecure,omitempty" tf:"splunk_secure,omitempty"`

	// (String, Sensitive) The Splunk access token.
	// The Splunk access token.
	SplunkTokenSecretRef *v1.SecretKeySelector `json:"splunkTokenSecretRef,omitempty" tf:"-"`

	// (String) Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
	// Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
	SumoSourceAddress *string `json:"sumoSourceAddress,omitempty" tf:"sumo_source_address,omitempty"`
}

type SinkObservation struct {

	// (String) The AWS Account ID.
	// The AWS Account ID.
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// (String) Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
	// Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
	AwsPartnerEventSource *string `json:"awsPartnerEventSource,omitempty" tf:"aws_partner_event_source,omitempty"`

	// east-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, me-south-1, sa-east-1, us-gov-east-1, us-gov-west-1, us-east-1, us-east-2, us-west-1, us-west-2.
	// The region in which the EventBridge event source will be created. Possible values: `ap-east-1`, `ap-northeast-1`, `ap-northeast-2`, `ap-northeast-3`, `ap-south-1`, `ap-southeast-1`, `ap-southeast-2`, `ca-central-1`, `cn-north-1`, `cn-northwest-1`, `eu-central-1`, `eu-north-1`, `eu-west-1`, `eu-west-2`, `eu-west-3`, `me-south-1`, `sa-east-1`, `us-gov-east-1`, `us-gov-west-1`, `us-east-1`, `us-east-2`, `us-west-1`, `us-west-2`.
	AwsRegion *string `json:"awsRegion,omitempty" tf:"aws_region,omitempty"`

	// (String) Name of the Partner Topic to be used with Azure. Generally should not be specified.
	// Name of the Partner Topic to be used with Azure. Generally should not be specified.
	AzurePartnerTopic *string `json:"azurePartnerTopic,omitempty" tf:"azure_partner_topic,omitempty"`

	// (String) The Azure region code. Possible values: australiacentral, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, southafricanorth, southcentralus, southeastasia, southindia, switzerlandnorth, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.
	// The Azure region code. Possible values: `australiacentral`, `australiaeast`, `australiasoutheast`, `brazilsouth`, `canadacentral`, `canadaeast`, `centralindia`, `centralus`, `eastasia`, `eastus`, `eastus2`, `francecentral`, `germanywestcentral`, `japaneast`, `japanwest`, `koreacentral`, `koreasouth`, `northcentralus`, `northeurope`, `norwayeast`, `southafricanorth`, `southcentralus`, `southeastasia`, `southindia`, `switzerlandnorth`, `uaenorth`, `uksouth`, `ukwest`, `westcentralus`, `westeurope`, `westindia`, `westus`, `westus2`.
	AzureRegion *string `json:"azureRegion,omitempty" tf:"azure_region,omitempty"`

	// (String) The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
	// The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
	AzureResourceGroup *string `json:"azureResourceGroup,omitempty" tf:"azure_resource_group,omitempty"`

	// (String) The unique alphanumeric string that identifies your Azure subscription.
	// The unique alphanumeric string that identifies your Azure subscription.
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty" tf:"azure_subscription_id,omitempty"`

	// (String) The Datadog region. Possible values: us, eu, us3, us5.
	// The Datadog region. Possible values: `us`, `eu`, `us3`, `us5`.
	DatadogRegion *string `json:"datadogRegion,omitempty" tf:"datadog_region,omitempty"`

	// (String) The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
	// The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
	HTTPContentFormat *string `json:"httpContentFormat,omitempty" tf:"http_content_format,omitempty"`

	// Type" header to send over HTTP. Common value is "application/json".
	// The "Content-Type" header to send over HTTP. Common value is "application/json".
	HTTPContentType *string `json:"httpContentType,omitempty" tf:"http_content_type,omitempty"`

	// (List of Map of String) Additional HTTP headers to be included as part of the HTTP request.
	// Additional HTTP headers to be included as part of the HTTP request.
	HTTPCustomHeaders []map[string]*string `json:"httpCustomHeaders,omitempty" tf:"http_custom_headers,omitempty"`

	// (String) The HTTP endpoint to send streaming logs.
	// The HTTP endpoint to send streaming logs.
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// (String) The Mixpanel project ID, found on the Project Settings page.
	// The Mixpanel project ID, found on the Project Settings page.
	MixpanelProjectID *string `json:"mixpanelProjectId,omitempty" tf:"mixpanel_project_id,omitempty"`

	// (String) The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
	// The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
	MixpanelRegion *string `json:"mixpanelRegion,omitempty" tf:"mixpanel_region,omitempty"`

	// (String) The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
	// The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
	MixpanelServiceAccountUsername *string `json:"mixpanelServiceAccountUsername,omitempty" tf:"mixpanel_service_account_username,omitempty"`

	// (String) The Splunk domain name.
	// The Splunk domain name.
	SplunkDomain *string `json:"splunkDomain,omitempty" tf:"splunk_domain,omitempty"`

	// (String) The Splunk port.
	// The Splunk port.
	SplunkPort *string `json:"splunkPort,omitempty" tf:"splunk_port,omitempty"`

	// signed certificates.
	// This toggle should be turned off when using self-signed certificates.
	SplunkSecure *bool `json:"splunkSecure,omitempty" tf:"splunk_secure,omitempty"`

	// (String) Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
	// Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
	SumoSourceAddress *string `json:"sumoSourceAddress,omitempty" tf:"sumo_source_address,omitempty"`
}

type SinkParameters struct {

	// (String) The AWS Account ID.
	// The AWS Account ID.
	// +kubebuilder:validation:Optional
	AwsAccountID *string `json:"awsAccountId,omitempty" tf:"aws_account_id,omitempty"`

	// (String) Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
	// Name of the Partner Event Source to be used with AWS. Generally generated by Auth0 and passed to AWS, so this should be an output attribute.
	// +kubebuilder:validation:Optional
	AwsPartnerEventSource *string `json:"awsPartnerEventSource,omitempty" tf:"aws_partner_event_source,omitempty"`

	// east-1, ap-northeast-1, ap-northeast-2, ap-northeast-3, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, cn-north-1, cn-northwest-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, me-south-1, sa-east-1, us-gov-east-1, us-gov-west-1, us-east-1, us-east-2, us-west-1, us-west-2.
	// The region in which the EventBridge event source will be created. Possible values: `ap-east-1`, `ap-northeast-1`, `ap-northeast-2`, `ap-northeast-3`, `ap-south-1`, `ap-southeast-1`, `ap-southeast-2`, `ca-central-1`, `cn-north-1`, `cn-northwest-1`, `eu-central-1`, `eu-north-1`, `eu-west-1`, `eu-west-2`, `eu-west-3`, `me-south-1`, `sa-east-1`, `us-gov-east-1`, `us-gov-west-1`, `us-east-1`, `us-east-2`, `us-west-1`, `us-west-2`.
	// +kubebuilder:validation:Optional
	AwsRegion *string `json:"awsRegion,omitempty" tf:"aws_region,omitempty"`

	// (String) Name of the Partner Topic to be used with Azure. Generally should not be specified.
	// Name of the Partner Topic to be used with Azure. Generally should not be specified.
	// +kubebuilder:validation:Optional
	AzurePartnerTopic *string `json:"azurePartnerTopic,omitempty" tf:"azure_partner_topic,omitempty"`

	// (String) The Azure region code. Possible values: australiacentral, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, southafricanorth, southcentralus, southeastasia, southindia, switzerlandnorth, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.
	// The Azure region code. Possible values: `australiacentral`, `australiaeast`, `australiasoutheast`, `brazilsouth`, `canadacentral`, `canadaeast`, `centralindia`, `centralus`, `eastasia`, `eastus`, `eastus2`, `francecentral`, `germanywestcentral`, `japaneast`, `japanwest`, `koreacentral`, `koreasouth`, `northcentralus`, `northeurope`, `norwayeast`, `southafricanorth`, `southcentralus`, `southeastasia`, `southindia`, `switzerlandnorth`, `uaenorth`, `uksouth`, `ukwest`, `westcentralus`, `westeurope`, `westindia`, `westus`, `westus2`.
	// +kubebuilder:validation:Optional
	AzureRegion *string `json:"azureRegion,omitempty" tf:"azure_region,omitempty"`

	// (String) The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
	// The Azure EventGrid resource group which allows you to manage all Azure assets within one subscription.
	// +kubebuilder:validation:Optional
	AzureResourceGroup *string `json:"azureResourceGroup,omitempty" tf:"azure_resource_group,omitempty"`

	// (String) The unique alphanumeric string that identifies your Azure subscription.
	// The unique alphanumeric string that identifies your Azure subscription.
	// +kubebuilder:validation:Optional
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty" tf:"azure_subscription_id,omitempty"`

	// (String, Sensitive) The Datadog API key.
	// The Datadog API key.
	// +kubebuilder:validation:Optional
	DatadogAPIKeySecretRef *v1.SecretKeySelector `json:"datadogApiKeySecretRef,omitempty" tf:"-"`

	// (String) The Datadog region. Possible values: us, eu, us3, us5.
	// The Datadog region. Possible values: `us`, `eu`, `us3`, `us5`.
	// +kubebuilder:validation:Optional
	DatadogRegion *string `json:"datadogRegion,omitempty" tf:"datadog_region,omitempty"`

	// (String, Sensitive) Sent in the HTTP "Authorization" header with each request.
	// Sent in the HTTP "Authorization" header with each request.
	// +kubebuilder:validation:Optional
	HTTPAuthorizationSecretRef *v1.SecretKeySelector `json:"httpAuthorizationSecretRef,omitempty" tf:"-"`

	// (String) The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
	// The format of data sent over HTTP. Options are "JSONLINES", "JSONARRAY" or "JSONOBJECT"
	// +kubebuilder:validation:Optional
	HTTPContentFormat *string `json:"httpContentFormat,omitempty" tf:"http_content_format,omitempty"`

	// Type" header to send over HTTP. Common value is "application/json".
	// The "Content-Type" header to send over HTTP. Common value is "application/json".
	// +kubebuilder:validation:Optional
	HTTPContentType *string `json:"httpContentType,omitempty" tf:"http_content_type,omitempty"`

	// (List of Map of String) Additional HTTP headers to be included as part of the HTTP request.
	// Additional HTTP headers to be included as part of the HTTP request.
	// +kubebuilder:validation:Optional
	HTTPCustomHeaders []map[string]*string `json:"httpCustomHeaders,omitempty" tf:"http_custom_headers,omitempty"`

	// (String) The HTTP endpoint to send streaming logs.
	// The HTTP endpoint to send streaming logs.
	// +kubebuilder:validation:Optional
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// (String) The Mixpanel project ID, found on the Project Settings page.
	// The Mixpanel project ID, found on the Project Settings page.
	// +kubebuilder:validation:Optional
	MixpanelProjectID *string `json:"mixpanelProjectId,omitempty" tf:"mixpanel_project_id,omitempty"`

	// (String) The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
	// The Mixpanel region. Options are ["us", "eu"]. EU is required for customers with EU data residency requirements.
	// +kubebuilder:validation:Optional
	MixpanelRegion *string `json:"mixpanelRegion,omitempty" tf:"mixpanel_region,omitempty"`

	// (String, Sensitive) The Mixpanel Service Account password.
	// The Mixpanel Service Account password.
	// +kubebuilder:validation:Optional
	MixpanelServiceAccountPasswordSecretRef *v1.SecretKeySelector `json:"mixpanelServiceAccountPasswordSecretRef,omitempty" tf:"-"`

	// (String) The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
	// The Mixpanel Service Account username. Services Accounts can be created in the Project Settings page.
	// +kubebuilder:validation:Optional
	MixpanelServiceAccountUsername *string `json:"mixpanelServiceAccountUsername,omitempty" tf:"mixpanel_service_account_username,omitempty"`

	// (String, Sensitive) The Segment Write Key.
	// The [Segment Write Key](https://segment.com/docs/connections/find-writekey/).
	// +kubebuilder:validation:Optional
	SegmentWriteKeySecretRef *v1.SecretKeySelector `json:"segmentWriteKeySecretRef,omitempty" tf:"-"`

	// (String) The Splunk domain name.
	// The Splunk domain name.
	// +kubebuilder:validation:Optional
	SplunkDomain *string `json:"splunkDomain,omitempty" tf:"splunk_domain,omitempty"`

	// (String) The Splunk port.
	// The Splunk port.
	// +kubebuilder:validation:Optional
	SplunkPort *string `json:"splunkPort,omitempty" tf:"splunk_port,omitempty"`

	// signed certificates.
	// This toggle should be turned off when using self-signed certificates.
	// +kubebuilder:validation:Optional
	SplunkSecure *bool `json:"splunkSecure,omitempty" tf:"splunk_secure,omitempty"`

	// (String, Sensitive) The Splunk access token.
	// The Splunk access token.
	// +kubebuilder:validation:Optional
	SplunkTokenSecretRef *v1.SecretKeySelector `json:"splunkTokenSecretRef,omitempty" tf:"-"`

	// (String) Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
	// Generated URL for your defined HTTP source in Sumo Logic for collecting streaming data from Auth0.
	// +kubebuilder:validation:Optional
	SumoSourceAddress *string `json:"sumoSourceAddress,omitempty" tf:"sumo_source_address,omitempty"`
}

type StreamInitParameters struct {

	// (List of Map of String) Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: auth.ancillary.fail, auth.ancillary.success, auth.login.fail, auth.login.notification, auth.login.success, auth.logout.fail, auth.logout.success, auth.signup.fail, auth.signup.success, auth.silent_auth.fail, auth.silent_auth.success, auth.token_exchange.fail, auth.token_exchange.success, management.fail, management.success, system.notification, user.fail, user.notification, user.success, other.
	// Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.
	Filters []map[string]*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// priority
	// Set True for priority log streams, False for non-priority
	IsPriority *bool `json:"isPriority,omitempty" tf:"is_priority,omitempty"`

	// (String) Name of the log stream.
	// Name of the log stream.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The sink configuration for the log stream. (see below for nested schema)
	// The sink configuration for the log stream.
	Sink []SinkInitParameters `json:"sink,omitempty" tf:"sink,omitempty"`

	// (String) The current status of the log stream. Options are "active", "paused", "suspended".
	// The current status of the log stream. Options are "active", "paused", "suspended".
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Type of the log stream, which indicates the sink provider. Options include: eventbridge, eventgrid, http, datadog, splunk, sumo, mixpanel, segment.
	// Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StreamObservation struct {

	// (List of Map of String) Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: auth.ancillary.fail, auth.ancillary.success, auth.login.fail, auth.login.notification, auth.login.success, auth.logout.fail, auth.logout.success, auth.signup.fail, auth.signup.success, auth.silent_auth.fail, auth.silent_auth.success, auth.token_exchange.fail, auth.token_exchange.success, management.fail, management.success, system.notification, user.fail, user.notification, user.success, other.
	// Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.
	Filters []map[string]*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// priority
	// Set True for priority log streams, False for non-priority
	IsPriority *bool `json:"isPriority,omitempty" tf:"is_priority,omitempty"`

	// (String) Name of the log stream.
	// Name of the log stream.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The sink configuration for the log stream. (see below for nested schema)
	// The sink configuration for the log stream.
	Sink []SinkObservation `json:"sink,omitempty" tf:"sink,omitempty"`

	// (String) The current status of the log stream. Options are "active", "paused", "suspended".
	// The current status of the log stream. Options are "active", "paused", "suspended".
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Type of the log stream, which indicates the sink provider. Options include: eventbridge, eventgrid, http, datadog, splunk, sumo, mixpanel, segment.
	// Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StreamParameters struct {

	// (List of Map of String) Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: auth.ancillary.fail, auth.ancillary.success, auth.login.fail, auth.login.notification, auth.login.success, auth.logout.fail, auth.logout.success, auth.signup.fail, auth.signup.success, auth.silent_auth.fail, auth.silent_auth.success, auth.token_exchange.fail, auth.token_exchange.success, management.fail, management.success, system.notification, user.fail, user.notification, user.success, other.
	// Only logs events matching these filters will be delivered by the stream. If omitted or empty, all events will be delivered. Filters available: `auth.ancillary.fail`, `auth.ancillary.success`, `auth.login.fail`, `auth.login.notification`, `auth.login.success`, `auth.logout.fail`, `auth.logout.success`, `auth.signup.fail`, `auth.signup.success`, `auth.silent_auth.fail`, `auth.silent_auth.success`, `auth.token_exchange.fail`, `auth.token_exchange.success`, `management.fail`, `management.success`, `system.notification`, `user.fail`, `user.notification`, `user.success`, `other`.
	// +kubebuilder:validation:Optional
	Filters []map[string]*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// priority
	// Set True for priority log streams, False for non-priority
	// +kubebuilder:validation:Optional
	IsPriority *bool `json:"isPriority,omitempty" tf:"is_priority,omitempty"`

	// (String) Name of the log stream.
	// Name of the log stream.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) The sink configuration for the log stream. (see below for nested schema)
	// The sink configuration for the log stream.
	// +kubebuilder:validation:Optional
	Sink []SinkParameters `json:"sink,omitempty" tf:"sink,omitempty"`

	// (String) The current status of the log stream. Options are "active", "paused", "suspended".
	// The current status of the log stream. Options are "active", "paused", "suspended".
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) Type of the log stream, which indicates the sink provider. Options include: eventbridge, eventgrid, http, datadog, splunk, sumo, mixpanel, segment.
	// Type of the log stream, which indicates the sink provider. Options include: `eventbridge`, `eventgrid`, `http`, `datadog`, `splunk`, `sumo`, `mixpanel`, `segment`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// StreamSpec defines the desired state of Stream
type StreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StreamInitParameters `json:"initProvider,omitempty"`
}

// StreamStatus defines the observed state of Stream.
type StreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Stream is the Schema for the Streams API. With this resource, you can manage your Auth0 log streams.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Stream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sink) || (has(self.initProvider) && has(self.initProvider.sink))",message="spec.forProvider.sink is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   StreamSpec   `json:"spec"`
	Status StreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamList contains a list of Streams
type StreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stream `json:"items"`
}

// Repository type metadata.
var (
	Stream_Kind             = "Stream"
	Stream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Stream_Kind}.String()
	Stream_KindAPIVersion   = Stream_Kind + "." + CRDGroupVersion.String()
	Stream_GroupVersionKind = CRDGroupVersion.WithKind(Stream_Kind)
)

func init() {
	SchemeBuilder.Register(&Stream{}, &StreamList{})
}
