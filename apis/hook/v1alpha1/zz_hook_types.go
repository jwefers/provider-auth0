// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HookInitParameters struct {

	// (Map of String) Dependencies of this hook used by the WebTask server.
	// Dependencies of this hook used by the WebTask server.
	// +mapType=granular
	Dependencies map[string]*string `json:"dependencies,omitempty" tf:"dependencies,omitempty"`

	// (Boolean) Whether the hook is enabled, or disabled.
	// Whether the hook is enabled, or disabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Name of this hook.
	// Name of this hook.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Code to be executed when this hook runs.
	// Code to be executed when this hook runs.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	Secrets map[string]*string `json:"secretsSecretRef,omitempty" tf:"-"`

	// exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
	// Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`
}

type HookObservation struct {

	// (Map of String) Dependencies of this hook used by the WebTask server.
	// Dependencies of this hook used by the WebTask server.
	// +mapType=granular
	Dependencies map[string]*string `json:"dependencies,omitempty" tf:"dependencies,omitempty"`

	// (Boolean) Whether the hook is enabled, or disabled.
	// Whether the hook is enabled, or disabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of this hook.
	// Name of this hook.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Code to be executed when this hook runs.
	// Code to be executed when this hook runs.
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
	// Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`
}

type HookParameters struct {

	// (Map of String) Dependencies of this hook used by the WebTask server.
	// Dependencies of this hook used by the WebTask server.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Dependencies map[string]*string `json:"dependencies,omitempty" tf:"dependencies,omitempty"`

	// (Boolean) Whether the hook is enabled, or disabled.
	// Whether the hook is enabled, or disabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Name of this hook.
	// Name of this hook.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Code to be executed when this hook runs.
	// Code to be executed when this hook runs.
	// +kubebuilder:validation:Optional
	Script *string `json:"script,omitempty" tf:"script,omitempty"`

	// (Map of String, Sensitive) The secrets associated with the hook.
	// The secrets associated with the hook.
	// +kubebuilder:validation:Optional
	SecretsSecretRef *v1.SecretReference `json:"secretsSecretRef,omitempty" tf:"-"`

	// exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
	// Execution stage of this rule. Can be credentials-exchange, pre-user-registration, post-user-registration, post-change-password, or send-phone-message.
	// +kubebuilder:validation:Optional
	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`
}

// HookSpec defines the desired state of Hook
type HookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HookParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HookInitParameters `json:"initProvider,omitempty"`
}

// HookStatus defines the observed state of Hook.
type HookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Hook is the Schema for the Hooks API. Hooks are secure, self-contained functions that allow you to customize the behavior of Auth0 when executed for selected extensibility points of the Auth0 platform. Auth0 invokes Hooks during runtime to execute your custom Node.js code. Depending on the extensibility point, you can use hooks with Database Connections and/or Passwordless Connections. !> This resource is deprecated. Refer to the guide on how to migrate from hooks to actions https://auth0.com/docs/customize/actions/migrate/migrate-from-hooks-to-actions and manage your actions using the auth0_action resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Hook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.script) || (has(self.initProvider) && has(self.initProvider.script))",message="spec.forProvider.script is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.triggerId) || (has(self.initProvider) && has(self.initProvider.triggerId))",message="spec.forProvider.triggerId is a required parameter"
	Spec   HookSpec   `json:"spec"`
	Status HookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HookList contains a list of Hooks
type HookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Hook `json:"items"`
}

// Repository type metadata.
var (
	Hook_Kind             = "Hook"
	Hook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Hook_Kind}.String()
	Hook_KindAPIVersion   = Hook_Kind + "." + CRDGroupVersion.String()
	Hook_GroupVersionKind = CRDGroupVersion.WithKind(Hook_Kind)
)

func init() {
	SchemeBuilder.Register(&Hook{}, &HookList{})
}
