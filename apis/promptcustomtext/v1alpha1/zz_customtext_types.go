// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomTextInitParameters struct {

	// (String) JSON containing the custom texts. You can check the options for each prompt here.
	// JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// EG, ar-SA, az, bg, bn, bs, ca-ES, cnr, cs, cy, da, de, el, en, en-CA, es, es-419, es-AR, es-MX, et, eu-ES, fa, fi, fr, fr-CA, fr-FR, gl-ES, gu, he, hi, hr, hu, hy, id, is, it, ja, ka, kk, kn, ko, lt, lv, mk, ml, mn, mr, ms, my, nb, nl, nn, no, pa, pl, pt, pt-BR, pt-PT, ro, ru, sk, sl, so, sq, sr, sv, sw, ta, te, th, tl, tr, uk, ur, vi, zgh, zh-CN, zh-HK, zh-TW.
	// Language of the custom text. Options include: `am`, `ar`, `ar-EG`, `ar-SA`, `az`, `bg`, `bn`, `bs`, `ca-ES`, `cnr`, `cs`, `cy`, `da`, `de`, `el`, `en`, `en-CA`, `es`, `es-419`, `es-AR`, `es-MX`, `et`, `eu-ES`, `fa`, `fi`, `fr`, `fr-CA`, `fr-FR`, `gl-ES`, `gu`, `he`, `hi`, `hr`, `hu`, `hy`, `id`, `is`, `it`, `ja`, `ka`, `kk`, `kn`, `ko`, `lt`, `lv`, `mk`, `ml`, `mn`, `mr`, `ms`, `my`, `nb`, `nl`, `nn`, `no`, `pa`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `so`, `sq`, `sr`, `sv`, `sw`, `ta`, `te`, `th`, `tl`, `tr`, `uk`, `ur`, `vi`, `zgh`, `zh-CN`, `zh-HK`, `zh-TW`.
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// form, customized-consent, device-flow, email-otp-challenge, email-verification, invitation, login, login-email-verification, login-id, login-password, login-passwordless, logout, mfa, mfa-email, mfa-otp, mfa-phone, mfa-push, mfa-recovery-code, mfa-sms, mfa-voice, mfa-webauthn, organizations, passkeys, phone-identifier-challenge, phone-identifier-enrollment, reset-password, signup, signup-id, signup-password, status.
	// The term `prompt` is used to refer to a specific step in the login flow. Options include: `captcha`, `common`, `consent`, `custom-form`, `customized-consent`, `device-flow`, `email-otp-challenge`, `email-verification`, `invitation`, `login`, `login-email-verification`, `login-id`, `login-password`, `login-passwordless`, `logout`, `mfa`, `mfa-email`, `mfa-otp`, `mfa-phone`, `mfa-push`, `mfa-recovery-code`, `mfa-sms`, `mfa-voice`, `mfa-webauthn`, `organizations`, `passkeys`, `phone-identifier-challenge`, `phone-identifier-enrollment`, `reset-password`, `signup`, `signup-id`, `signup-password`, `status`.
	Prompt *string `json:"prompt,omitempty" tf:"prompt,omitempty"`
}

type CustomTextObservation struct {

	// (String) JSON containing the custom texts. You can check the options for each prompt here.
	// JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// EG, ar-SA, az, bg, bn, bs, ca-ES, cnr, cs, cy, da, de, el, en, en-CA, es, es-419, es-AR, es-MX, et, eu-ES, fa, fi, fr, fr-CA, fr-FR, gl-ES, gu, he, hi, hr, hu, hy, id, is, it, ja, ka, kk, kn, ko, lt, lv, mk, ml, mn, mr, ms, my, nb, nl, nn, no, pa, pl, pt, pt-BR, pt-PT, ro, ru, sk, sl, so, sq, sr, sv, sw, ta, te, th, tl, tr, uk, ur, vi, zgh, zh-CN, zh-HK, zh-TW.
	// Language of the custom text. Options include: `am`, `ar`, `ar-EG`, `ar-SA`, `az`, `bg`, `bn`, `bs`, `ca-ES`, `cnr`, `cs`, `cy`, `da`, `de`, `el`, `en`, `en-CA`, `es`, `es-419`, `es-AR`, `es-MX`, `et`, `eu-ES`, `fa`, `fi`, `fr`, `fr-CA`, `fr-FR`, `gl-ES`, `gu`, `he`, `hi`, `hr`, `hu`, `hy`, `id`, `is`, `it`, `ja`, `ka`, `kk`, `kn`, `ko`, `lt`, `lv`, `mk`, `ml`, `mn`, `mr`, `ms`, `my`, `nb`, `nl`, `nn`, `no`, `pa`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `so`, `sq`, `sr`, `sv`, `sw`, `ta`, `te`, `th`, `tl`, `tr`, `uk`, `ur`, `vi`, `zgh`, `zh-CN`, `zh-HK`, `zh-TW`.
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// form, customized-consent, device-flow, email-otp-challenge, email-verification, invitation, login, login-email-verification, login-id, login-password, login-passwordless, logout, mfa, mfa-email, mfa-otp, mfa-phone, mfa-push, mfa-recovery-code, mfa-sms, mfa-voice, mfa-webauthn, organizations, passkeys, phone-identifier-challenge, phone-identifier-enrollment, reset-password, signup, signup-id, signup-password, status.
	// The term `prompt` is used to refer to a specific step in the login flow. Options include: `captcha`, `common`, `consent`, `custom-form`, `customized-consent`, `device-flow`, `email-otp-challenge`, `email-verification`, `invitation`, `login`, `login-email-verification`, `login-id`, `login-password`, `login-passwordless`, `logout`, `mfa`, `mfa-email`, `mfa-otp`, `mfa-phone`, `mfa-push`, `mfa-recovery-code`, `mfa-sms`, `mfa-voice`, `mfa-webauthn`, `organizations`, `passkeys`, `phone-identifier-challenge`, `phone-identifier-enrollment`, `reset-password`, `signup`, `signup-id`, `signup-password`, `status`.
	Prompt *string `json:"prompt,omitempty" tf:"prompt,omitempty"`
}

type CustomTextParameters struct {

	// (String) JSON containing the custom texts. You can check the options for each prompt here.
	// JSON containing the custom texts. You can check the options for each prompt [here](https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts#prompt-values).
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// EG, ar-SA, az, bg, bn, bs, ca-ES, cnr, cs, cy, da, de, el, en, en-CA, es, es-419, es-AR, es-MX, et, eu-ES, fa, fi, fr, fr-CA, fr-FR, gl-ES, gu, he, hi, hr, hu, hy, id, is, it, ja, ka, kk, kn, ko, lt, lv, mk, ml, mn, mr, ms, my, nb, nl, nn, no, pa, pl, pt, pt-BR, pt-PT, ro, ru, sk, sl, so, sq, sr, sv, sw, ta, te, th, tl, tr, uk, ur, vi, zgh, zh-CN, zh-HK, zh-TW.
	// Language of the custom text. Options include: `am`, `ar`, `ar-EG`, `ar-SA`, `az`, `bg`, `bn`, `bs`, `ca-ES`, `cnr`, `cs`, `cy`, `da`, `de`, `el`, `en`, `en-CA`, `es`, `es-419`, `es-AR`, `es-MX`, `et`, `eu-ES`, `fa`, `fi`, `fr`, `fr-CA`, `fr-FR`, `gl-ES`, `gu`, `he`, `hi`, `hr`, `hu`, `hy`, `id`, `is`, `it`, `ja`, `ka`, `kk`, `kn`, `ko`, `lt`, `lv`, `mk`, `ml`, `mn`, `mr`, `ms`, `my`, `nb`, `nl`, `nn`, `no`, `pa`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `so`, `sq`, `sr`, `sv`, `sw`, `ta`, `te`, `th`, `tl`, `tr`, `uk`, `ur`, `vi`, `zgh`, `zh-CN`, `zh-HK`, `zh-TW`.
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// form, customized-consent, device-flow, email-otp-challenge, email-verification, invitation, login, login-email-verification, login-id, login-password, login-passwordless, logout, mfa, mfa-email, mfa-otp, mfa-phone, mfa-push, mfa-recovery-code, mfa-sms, mfa-voice, mfa-webauthn, organizations, passkeys, phone-identifier-challenge, phone-identifier-enrollment, reset-password, signup, signup-id, signup-password, status.
	// The term `prompt` is used to refer to a specific step in the login flow. Options include: `captcha`, `common`, `consent`, `custom-form`, `customized-consent`, `device-flow`, `email-otp-challenge`, `email-verification`, `invitation`, `login`, `login-email-verification`, `login-id`, `login-password`, `login-passwordless`, `logout`, `mfa`, `mfa-email`, `mfa-otp`, `mfa-phone`, `mfa-push`, `mfa-recovery-code`, `mfa-sms`, `mfa-voice`, `mfa-webauthn`, `organizations`, `passkeys`, `phone-identifier-challenge`, `phone-identifier-enrollment`, `reset-password`, `signup`, `signup-id`, `signup-password`, `status`.
	// +kubebuilder:validation:Optional
	Prompt *string `json:"prompt,omitempty" tf:"prompt,omitempty"`
}

// CustomTextSpec defines the desired state of CustomText
type CustomTextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomTextParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomTextInitParameters `json:"initProvider,omitempty"`
}

// CustomTextStatus defines the observed state of CustomText.
type CustomTextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomTextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomText is the Schema for the CustomTexts API. With this resource, you can manage custom text on your Auth0 prompts. You can read more about custom texts here https://auth0.com/docs/customize/universal-login-pages/customize-login-text-prompts.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type CustomText struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.body) || (has(self.initProvider) && has(self.initProvider.body))",message="spec.forProvider.body is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.language) || (has(self.initProvider) && has(self.initProvider.language))",message="spec.forProvider.language is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.prompt) || (has(self.initProvider) && has(self.initProvider.prompt))",message="spec.forProvider.prompt is a required parameter"
	Spec   CustomTextSpec   `json:"spec"`
	Status CustomTextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomTextList contains a list of CustomTexts
type CustomTextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomText `json:"items"`
}

// Repository type metadata.
var (
	CustomText_Kind             = "CustomText"
	CustomText_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomText_Kind}.String()
	CustomText_KindAPIVersion   = CustomText_Kind + "." + CRDGroupVersion.String()
	CustomText_GroupVersionKind = CRDGroupVersion.WithKind(CustomText_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomText{}, &CustomTextList{})
}
