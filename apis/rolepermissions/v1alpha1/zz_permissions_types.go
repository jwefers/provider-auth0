// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsInitParameters struct {

	// (Block Set, Min: 1) List of API permissions granted to the role. (see below for nested schema)
	// List of API permissions granted to the role.
	Permissions []PermissionsPermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) ID of the role to associate the permission to.
	// ID of the role to associate the permission to.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type PermissionsObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block Set, Min: 1) List of API permissions granted to the role. (see below for nested schema)
	// List of API permissions granted to the role.
	Permissions []PermissionsPermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) ID of the role to associate the permission to.
	// ID of the role to associate the permission to.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type PermissionsParameters struct {

	// (Block Set, Min: 1) List of API permissions granted to the role. (see below for nested schema)
	// List of API permissions granted to the role.
	// +kubebuilder:validation:Optional
	Permissions []PermissionsPermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (String) ID of the role to associate the permission to.
	// ID of the role to associate the permission to.
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type PermissionsPermissionsInitParameters struct {

	// (String) Name of permission.
	// Name of permission.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Resource server identifier associated with the permission.
	// Resource server identifier associated with the permission.
	ResourceServerIdentifier *string `json:"resourceServerIdentifier,omitempty" tf:"resource_server_identifier,omitempty"`
}

type PermissionsPermissionsObservation struct {

	// (String) Description of the permission.
	// Description of the permission.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name of permission.
	// Name of permission.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Resource server identifier associated with the permission.
	// Resource server identifier associated with the permission.
	ResourceServerIdentifier *string `json:"resourceServerIdentifier,omitempty" tf:"resource_server_identifier,omitempty"`

	// (String) Name of resource server that the permission is associated with.
	// Name of resource server that the permission is associated with.
	ResourceServerName *string `json:"resourceServerName,omitempty" tf:"resource_server_name,omitempty"`
}

type PermissionsPermissionsParameters struct {

	// (String) Name of permission.
	// Name of permission.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Resource server identifier associated with the permission.
	// Resource server identifier associated with the permission.
	// +kubebuilder:validation:Optional
	ResourceServerIdentifier *string `json:"resourceServerIdentifier" tf:"resource_server_identifier,omitempty"`
}

// PermissionsSpec defines the desired state of Permissions
type PermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PermissionsInitParameters `json:"initProvider,omitempty"`
}

// PermissionsStatus defines the observed state of Permissions.
type PermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Permissions is the Schema for the Permissionss API. With this resource, you can manage role permissions (1-many).
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Permissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	Spec   PermissionsSpec   `json:"spec"`
	Status PermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionsList contains a list of Permissionss
type PermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permissions `json:"items"`
}

// Repository type metadata.
var (
	Permissions_Kind             = "Permissions"
	Permissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permissions_Kind}.String()
	Permissions_KindAPIVersion   = Permissions_Kind + "." + CRDGroupVersion.String()
	Permissions_GroupVersionKind = CRDGroupVersion.WithKind(Permissions_Kind)
)

func init() {
	SchemeBuilder.Register(&Permissions{}, &PermissionsList{})
}
