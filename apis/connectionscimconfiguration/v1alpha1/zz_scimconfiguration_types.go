// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MappingInitParameters struct {

	// (String) The field location in the Auth0 schema.
	// The field location in the Auth0 schema.
	Auth0 *string `json:"auth0,omitempty" tf:"auth0,omitempty"`

	// (String) The field location in the SCIM schema.
	// The field location in the SCIM schema.
	Scim *string `json:"scim,omitempty" tf:"scim,omitempty"`
}

type MappingObservation struct {

	// (String) The field location in the Auth0 schema.
	// The field location in the Auth0 schema.
	Auth0 *string `json:"auth0,omitempty" tf:"auth0,omitempty"`

	// (String) The field location in the SCIM schema.
	// The field location in the SCIM schema.
	Scim *string `json:"scim,omitempty" tf:"scim,omitempty"`
}

type MappingParameters struct {

	// (String) The field location in the Auth0 schema.
	// The field location in the Auth0 schema.
	// +kubebuilder:validation:Optional
	Auth0 *string `json:"auth0" tf:"auth0,omitempty"`

	// (String) The field location in the SCIM schema.
	// The field location in the SCIM schema.
	// +kubebuilder:validation:Optional
	Scim *string `json:"scim" tf:"scim,omitempty"`
}

type ScimConfigurationInitParameters struct {

	// (String) ID of the connection for this SCIM configuration.
	// ID of the connection for this SCIM configuration.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (Block Set) Mapping between Auth0 attributes and SCIM attributes. If user_id_attribute is set, mapping must be set as well. (see below for nested schema)
	// Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
	Mapping []MappingInitParameters `json:"mapping,omitempty" tf:"mapping,omitempty"`

	// (String) User ID attribute for generation unique of user ids. If user_id_attribute is set, mapping must be set as well. Defaults to userName for SAML connections and externalId for OIDC connections.
	// User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIDAttribute *string `json:"userIdAttribute,omitempty" tf:"user_id_attribute,omitempty"`
}

type ScimConfigurationObservation struct {

	// (String) ID of the connection for this SCIM configuration.
	// ID of the connection for this SCIM configuration.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) Name of the connection for this SCIM configuration.
	// Name of the connection for this SCIM configuration.
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block Set) Mapping between Auth0 attributes and SCIM attributes. If user_id_attribute is set, mapping must be set as well. (see below for nested schema)
	// Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
	Mapping []MappingObservation `json:"mapping,omitempty" tf:"mapping,omitempty"`

	// (String) Schema of the connection for this SCIM configuration.
	// Schema of the connection for this SCIM configuration.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// (String) Name of the tenant for this SCIM configuration.
	// Name of the tenant for this SCIM configuration.
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	// (String) User ID attribute for generation unique of user ids. If user_id_attribute is set, mapping must be set as well. Defaults to userName for SAML connections and externalId for OIDC connections.
	// User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	UserIDAttribute *string `json:"userIdAttribute,omitempty" tf:"user_id_attribute,omitempty"`
}

type ScimConfigurationParameters struct {

	// (String) ID of the connection for this SCIM configuration.
	// ID of the connection for this SCIM configuration.
	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (Block Set) Mapping between Auth0 attributes and SCIM attributes. If user_id_attribute is set, mapping must be set as well. (see below for nested schema)
	// Mapping between Auth0 attributes and SCIM attributes. If `user_id_attribute` is set, `mapping` must be set as well.
	// +kubebuilder:validation:Optional
	Mapping []MappingParameters `json:"mapping,omitempty" tf:"mapping,omitempty"`

	// (String) User ID attribute for generation unique of user ids. If user_id_attribute is set, mapping must be set as well. Defaults to userName for SAML connections and externalId for OIDC connections.
	// User ID attribute for generation unique of user ids. If `user_id_attribute` is set, `mapping` must be set as well. Defaults to `userName` for SAML connections and `externalId` for OIDC connections.
	// +kubebuilder:validation:Optional
	UserIDAttribute *string `json:"userIdAttribute,omitempty" tf:"user_id_attribute,omitempty"`
}

// ScimConfigurationSpec defines the desired state of ScimConfiguration
type ScimConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScimConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScimConfigurationInitParameters `json:"initProvider,omitempty"`
}

// ScimConfigurationStatus defines the observed state of ScimConfiguration.
type ScimConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScimConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScimConfiguration is the Schema for the ScimConfigurations API. With this resource, you can configure SCIM(System for Cross-domain Identity Management) https://simplecloud.info/ support for SAML and OpenID Connect Enterprise connections.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type ScimConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionId) || (has(self.initProvider) && has(self.initProvider.connectionId))",message="spec.forProvider.connectionId is a required parameter"
	Spec   ScimConfigurationSpec   `json:"spec"`
	Status ScimConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScimConfigurationList contains a list of ScimConfigurations
type ScimConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScimConfiguration `json:"items"`
}

// Repository type metadata.
var (
	ScimConfiguration_Kind             = "ScimConfiguration"
	ScimConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScimConfiguration_Kind}.String()
	ScimConfiguration_KindAPIVersion   = ScimConfiguration_Kind + "." + CRDGroupVersion.String()
	ScimConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(ScimConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&ScimConfiguration{}, &ScimConfigurationList{})
}
