// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedTypesInitParameters struct {

	// (Block List) Connection Options for Email Attribute (see below for nested schema)
	// One of the allowed types for UserName signup attribute
	Email *bool `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
	// One of the allowed types for UserName signup attribute
	PhoneNumber *bool `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`
}

type AllowedTypesObservation struct {

	// (Block List) Connection Options for Email Attribute (see below for nested schema)
	// One of the allowed types for UserName signup attribute
	Email *bool `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
	// One of the allowed types for UserName signup attribute
	PhoneNumber *bool `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`
}

type AllowedTypesParameters struct {

	// (Block List) Connection Options for Email Attribute (see below for nested schema)
	// One of the allowed types for UserName signup attribute
	// +kubebuilder:validation:Optional
	Email *bool `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
	// One of the allowed types for UserName signup attribute
	// +kubebuilder:validation:Optional
	PhoneNumber *bool `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`
}

type AttributeMapInitParameters struct {

	// (Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)
	// This property is an object containing mapping information that allows Auth0 to interpret incoming claims from the IdP. Mapping information must be provided as key/value pairs.
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String) Method used to map incoming claims. Possible values: use_map (Okta or OIDC), bind_all (OIDC) or basic_profile (Okta).
	// Method used to map incoming claims. Possible values: `use_map` (Okta or OIDC), `bind_all` (OIDC) or `basic_profile` (Okta).
	MappingMode *string `json:"mappingMode,omitempty" tf:"mapping_mode,omitempty"`

	// (String) This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
	// This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
	UserinfoScope *string `json:"userinfoScope,omitempty" tf:"userinfo_scope,omitempty"`
}

type AttributeMapObservation struct {

	// (Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)
	// This property is an object containing mapping information that allows Auth0 to interpret incoming claims from the IdP. Mapping information must be provided as key/value pairs.
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String) Method used to map incoming claims. Possible values: use_map (Okta or OIDC), bind_all (OIDC) or basic_profile (Okta).
	// Method used to map incoming claims. Possible values: `use_map` (Okta or OIDC), `bind_all` (OIDC) or `basic_profile` (Okta).
	MappingMode *string `json:"mappingMode,omitempty" tf:"mapping_mode,omitempty"`

	// (String) This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
	// This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
	UserinfoScope *string `json:"userinfoScope,omitempty" tf:"userinfo_scope,omitempty"`
}

type AttributeMapParameters struct {

	// (Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)
	// This property is an object containing mapping information that allows Auth0 to interpret incoming claims from the IdP. Mapping information must be provided as key/value pairs.
	// +kubebuilder:validation:Optional
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (String) Method used to map incoming claims. Possible values: use_map (Okta or OIDC), bind_all (OIDC) or basic_profile (Okta).
	// Method used to map incoming claims. Possible values: `use_map` (Okta or OIDC), `bind_all` (OIDC) or `basic_profile` (Okta).
	// +kubebuilder:validation:Optional
	MappingMode *string `json:"mappingMode" tf:"mapping_mode,omitempty"`

	// (String) This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
	// This property defines the scopes that Auth0 sends to the IdP’s UserInfo endpoint when requested.
	// +kubebuilder:validation:Optional
	UserinfoScope *string `json:"userinfoScope,omitempty" tf:"userinfo_scope,omitempty"`
}

type AttributesInitParameters struct {

	// (Block List) Connection Options for Email Attribute (see below for nested schema)
	// Connection Options for Email Attribute
	Email []EmailInitParameters `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
	// Connection Options for Phone Number Attribute
	PhoneNumber []PhoneNumberInitParameters `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// (Block List) Connection Options for User Name Attribute (see below for nested schema)
	// Connection Options for User Name Attribute
	Username []UsernameInitParameters `json:"username,omitempty" tf:"username,omitempty"`
}

type AttributesObservation struct {

	// (Block List) Connection Options for Email Attribute (see below for nested schema)
	// Connection Options for Email Attribute
	Email []EmailObservation `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
	// Connection Options for Phone Number Attribute
	PhoneNumber []PhoneNumberObservation `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// (Block List) Connection Options for User Name Attribute (see below for nested schema)
	// Connection Options for User Name Attribute
	Username []UsernameObservation `json:"username,omitempty" tf:"username,omitempty"`
}

type AttributesParameters struct {

	// (Block List) Connection Options for Email Attribute (see below for nested schema)
	// Connection Options for Email Attribute
	// +kubebuilder:validation:Optional
	Email []EmailParameters `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List) Connection Options for Phone Number Attribute (see below for nested schema)
	// Connection Options for Phone Number Attribute
	// +kubebuilder:validation:Optional
	PhoneNumber []PhoneNumberParameters `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// (Block List) Connection Options for User Name Attribute (see below for nested schema)
	// Connection Options for User Name Attribute
	// +kubebuilder:validation:Optional
	Username []UsernameParameters `json:"username,omitempty" tf:"username,omitempty"`
}

type AuthenticationMethodsInitParameters struct {

	// (Block List, Max: 1) Configures passkey authentication (see below for nested schema)
	// Configures passkey authentication
	Passkey []PasskeyInitParameters `json:"passkey,omitempty" tf:"passkey,omitempty"`

	// (Block List, Max: 1) Configures password authentication (see below for nested schema)
	// Configures password authentication
	Password []PasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`
}

type AuthenticationMethodsObservation struct {

	// (Block List, Max: 1) Configures passkey authentication (see below for nested schema)
	// Configures passkey authentication
	Passkey []PasskeyObservation `json:"passkey,omitempty" tf:"passkey,omitempty"`

	// (Block List, Max: 1) Configures password authentication (see below for nested schema)
	// Configures password authentication
	Password []PasswordObservation `json:"password,omitempty" tf:"password,omitempty"`
}

type AuthenticationMethodsParameters struct {

	// (Block List, Max: 1) Configures passkey authentication (see below for nested schema)
	// Configures passkey authentication
	// +kubebuilder:validation:Optional
	Passkey []PasskeyParameters `json:"passkey,omitempty" tf:"passkey,omitempty"`

	// (Block List, Max: 1) Configures password authentication (see below for nested schema)
	// Configures password authentication
	// +kubebuilder:validation:Optional
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`
}

type ConnectionInitParameters struct {

	// (String) Name used in login screen.
	// Name used in login screen.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Boolean) Indicates whether the connection is domain level.
	// Indicates whether the connection is domain level.
	IsDomainConnection *bool `json:"isDomainConnection,omitempty" tf:"is_domain_connection,omitempty"`

	// (Map of String) Metadata associated with the connection, in the form of a map of string values (max 255 chars).
	// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Name of the connection.
	// Name of the connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Configuration settings for connection options. (see below for nested schema)
	// Configuration settings for connection options.
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (List of String) Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
	// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
	Realms []*string `json:"realms,omitempty" tf:"realms,omitempty"`

	// (Boolean) Display connection as a button. Only available on enterprise connections.
	// Display connection as a button. Only available on enterprise connections.
	ShowAsButton *bool `json:"showAsButton,omitempty" tf:"show_as_button,omitempty"`

	// (String) Type of the connection, which indicates the identity provider.
	// Type of the connection, which indicates the identity provider.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`
}

type ConnectionObservation struct {

	// (String) Name used in login screen.
	// Name used in login screen.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Indicates whether the connection is domain level.
	// Indicates whether the connection is domain level.
	IsDomainConnection *bool `json:"isDomainConnection,omitempty" tf:"is_domain_connection,omitempty"`

	// (Map of String) Metadata associated with the connection, in the form of a map of string values (max 255 chars).
	// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Name of the connection.
	// Name of the connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Configuration settings for connection options. (see below for nested schema)
	// Configuration settings for connection options.
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	// (List of String) Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
	// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
	Realms []*string `json:"realms,omitempty" tf:"realms,omitempty"`

	// (Boolean) Display connection as a button. Only available on enterprise connections.
	// Display connection as a button. Only available on enterprise connections.
	ShowAsButton *bool `json:"showAsButton,omitempty" tf:"show_as_button,omitempty"`

	// (String) Type of the connection, which indicates the identity provider.
	// Type of the connection, which indicates the identity provider.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`
}

type ConnectionParameters struct {

	// (String) Name used in login screen.
	// Name used in login screen.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Boolean) Indicates whether the connection is domain level.
	// Indicates whether the connection is domain level.
	// +kubebuilder:validation:Optional
	IsDomainConnection *bool `json:"isDomainConnection,omitempty" tf:"is_domain_connection,omitempty"`

	// (Map of String) Metadata associated with the connection, in the form of a map of string values (max 255 chars).
	// Metadata associated with the connection, in the form of a map of string values (max 255 chars).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) Name of the connection.
	// Name of the connection.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Configuration settings for connection options. (see below for nested schema)
	// Configuration settings for connection options.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (List of String) Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
	// Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is added as the realm.
	// +kubebuilder:validation:Optional
	Realms []*string `json:"realms,omitempty" tf:"realms,omitempty"`

	// (Boolean) Display connection as a button. Only available on enterprise connections.
	// Display connection as a button. Only available on enterprise connections.
	// +kubebuilder:validation:Optional
	ShowAsButton *bool `json:"showAsButton,omitempty" tf:"show_as_button,omitempty"`

	// (String) Type of the connection, which indicates the identity provider.
	// Type of the connection, which indicates the identity provider.
	// +kubebuilder:validation:Optional
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`
}

type ConnectionSettingsInitParameters struct {

	// 256 algorithm), plain (uses plaintext as described in the PKCE specification) or disabled (disables support for PKCE).
	// PKCE configuration. Possible values: `auto` (uses the strongest algorithm available), `S256` (uses the SHA-256 algorithm), `plain` (uses plaintext as described in the PKCE specification) or `disabled` (disables support for PKCE).
	Pkce *string `json:"pkce,omitempty" tf:"pkce,omitempty"`
}

type ConnectionSettingsObservation struct {

	// 256 algorithm), plain (uses plaintext as described in the PKCE specification) or disabled (disables support for PKCE).
	// PKCE configuration. Possible values: `auto` (uses the strongest algorithm available), `S256` (uses the SHA-256 algorithm), `plain` (uses plaintext as described in the PKCE specification) or `disabled` (disables support for PKCE).
	Pkce *string `json:"pkce,omitempty" tf:"pkce,omitempty"`
}

type ConnectionSettingsParameters struct {

	// 256 algorithm), plain (uses plaintext as described in the PKCE specification) or disabled (disables support for PKCE).
	// PKCE configuration. Possible values: `auto` (uses the strongest algorithm available), `S256` (uses the SHA-256 algorithm), `plain` (uses plaintext as described in the PKCE specification) or `disabled` (disables support for PKCE).
	// +kubebuilder:validation:Optional
	Pkce *string `json:"pkce" tf:"pkce,omitempty"`
}

type DecryptionKeyInitParameters struct {

	// (String)
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DecryptionKeyObservation struct {

	// (String)
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type DecryptionKeyParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Cert *string `json:"cert" tf:"cert,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`
}

type EmailInitParameters struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection Options Email Attribute Identifier
	Identifier []IdentifierInitParameters `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for Email attribute
	Signup []SignupInitParameters `json:"signup,omitempty" tf:"signup,omitempty"`

	// (String) Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
	// Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
	VerificationMethod *string `json:"verificationMethod,omitempty" tf:"verification_method,omitempty"`
}

type EmailObservation struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection Options Email Attribute Identifier
	Identifier []IdentifierObservation `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for Email attribute
	Signup []SignupObservation `json:"signup,omitempty" tf:"signup,omitempty"`

	// (String) Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
	// Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
	VerificationMethod *string `json:"verificationMethod,omitempty" tf:"verification_method,omitempty"`
}

type EmailParameters struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection Options Email Attribute Identifier
	// +kubebuilder:validation:Optional
	Identifier []IdentifierParameters `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	// +kubebuilder:validation:Optional
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for Email attribute
	// +kubebuilder:validation:Optional
	Signup []SignupParameters `json:"signup,omitempty" tf:"signup,omitempty"`

	// (String) Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
	// Defines whether whether user will receive a link or an OTP during user signup for email verification and password reset for email verification
	// +kubebuilder:validation:Optional
	VerificationMethod *string `json:"verificationMethod,omitempty" tf:"verification_method,omitempty"`
}

type GatewayAuthenticationInitParameters struct {

	// (String) Audience claim for the HS256 token sent to gateway_url.
	// Audience claim for the HS256 token sent to `gateway_url`.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (String) Authentication method (default is bearer token).
	// Authentication method (default is `bearer` token).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// encoded.
	// Specifies whether or not the secret is Base64-encoded.
	SecretBase64Encoded *bool `json:"secretBase64Encoded,omitempty" tf:"secret_base64_encoded,omitempty"`

	// (String, Sensitive) Secret used to sign the HS256 token sent to gateway_url.
	// Secret used to sign the HS256 token sent to `gateway_url`.
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// (String) Subject line of the email.
	// Subject claim for the HS256 token sent to `gateway_url`.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type GatewayAuthenticationObservation struct {

	// (String) Audience claim for the HS256 token sent to gateway_url.
	// Audience claim for the HS256 token sent to `gateway_url`.
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (String) Authentication method (default is bearer token).
	// Authentication method (default is `bearer` token).
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// encoded.
	// Specifies whether or not the secret is Base64-encoded.
	SecretBase64Encoded *bool `json:"secretBase64Encoded,omitempty" tf:"secret_base64_encoded,omitempty"`

	// (String) Subject line of the email.
	// Subject claim for the HS256 token sent to `gateway_url`.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type GatewayAuthenticationParameters struct {

	// (String) Audience claim for the HS256 token sent to gateway_url.
	// Audience claim for the HS256 token sent to `gateway_url`.
	// +kubebuilder:validation:Optional
	Audience *string `json:"audience,omitempty" tf:"audience,omitempty"`

	// (String) Authentication method (default is bearer token).
	// Authentication method (default is `bearer` token).
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// encoded.
	// Specifies whether or not the secret is Base64-encoded.
	// +kubebuilder:validation:Optional
	SecretBase64Encoded *bool `json:"secretBase64Encoded,omitempty" tf:"secret_base64_encoded,omitempty"`

	// (String, Sensitive) Secret used to sign the HS256 token sent to gateway_url.
	// Secret used to sign the HS256 token sent to `gateway_url`.
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// (String) Subject line of the email.
	// Subject claim for the HS256 token sent to `gateway_url`.
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type IdentifierInitParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether email attribute is active as an identifier
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type IdentifierObservation struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether email attribute is active as an identifier
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type IdentifierParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether email attribute is active as an identifier
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type IdpInitiatedInitParameters struct {

	// (String)
	ClientAuthorizeQuery *string `json:"clientAuthorizeQuery,omitempty" tf:"client_authorize_query,omitempty"`

	// (String) The strategy's client ID.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String)
	ClientProtocol *string `json:"clientProtocol,omitempty" tf:"client_protocol,omitempty"`

	// (Boolean) Enables passkey authentication
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type IdpInitiatedObservation struct {

	// (String)
	ClientAuthorizeQuery *string `json:"clientAuthorizeQuery,omitempty" tf:"client_authorize_query,omitempty"`

	// (String) The strategy's client ID.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String)
	ClientProtocol *string `json:"clientProtocol,omitempty" tf:"client_protocol,omitempty"`

	// (Boolean) Enables passkey authentication
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type IdpInitiatedParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	ClientAuthorizeQuery *string `json:"clientAuthorizeQuery,omitempty" tf:"client_authorize_query,omitempty"`

	// (String) The strategy's client ID.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	ClientProtocol *string `json:"clientProtocol,omitempty" tf:"client_protocol,omitempty"`

	// (Boolean) Enables passkey authentication
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MfaInitParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Indicates whether multifactor authentication is enabled for this connection.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Boolean) Indicates whether multifactor authentication enrollment settings will be returned.
	// Indicates whether multifactor authentication enrollment settings will be returned.
	ReturnEnrollSettings *bool `json:"returnEnrollSettings,omitempty" tf:"return_enroll_settings,omitempty"`
}

type MfaObservation struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Indicates whether multifactor authentication is enabled for this connection.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Boolean) Indicates whether multifactor authentication enrollment settings will be returned.
	// Indicates whether multifactor authentication enrollment settings will be returned.
	ReturnEnrollSettings *bool `json:"returnEnrollSettings,omitempty" tf:"return_enroll_settings,omitempty"`
}

type MfaParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Indicates whether multifactor authentication is enabled for this connection.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Boolean) Indicates whether multifactor authentication enrollment settings will be returned.
	// Indicates whether multifactor authentication enrollment settings will be returned.
	// +kubebuilder:validation:Optional
	ReturnEnrollSettings *bool `json:"returnEnrollSettings,omitempty" tf:"return_enroll_settings,omitempty"`
}

type OptionsInitParameters struct {

	// (Boolean) Enable API Access to users.
	// Enable API Access to users.
	APIEnableUsers *bool `json:"apiEnableUsers,omitempty" tf:"api_enable_users,omitempty"`

	// (String) ADFS URL where to fetch the metadata source.
	// ADFS URL where to fetch the metadata source.
	AdfsServer *string `json:"adfsServer,omitempty" tf:"adfs_server,omitempty"`

	// (Set of String) List of allowed audiences.
	// List of allowed audiences.
	// +listType=set
	AllowedAudiences []*string `json:"allowedAudiences,omitempty" tf:"allowed_audiences,omitempty"`

	// (String) App ID.
	// App ID.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (Block List, Max: 1) OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click here for more info. (see below for nested schema)
	// OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click [here](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/configure-pkce-claim-mapping-for-oidc#map-claims-for-oidc-connections) for more info.
	AttributeMap []AttributeMapInitParameters `json:"attributeMap,omitempty" tf:"attribute_map,omitempty"`

	// (Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)
	// Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	Attributes []AttributesInitParameters `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (Map of String) Query string parameters to be included as part of the generated passwordless email link.
	// Query string parameters to be included as part of the generated passwordless email link.
	// +mapType=granular
	AuthParams map[string]*string `json:"authParams,omitempty" tf:"auth_params,omitempty"`

	// (Block List) Specifies the authentication methods and their configuration (enabled or disabled) (see below for nested schema)
	// Specifies the authentication methods and their configuration (enabled or disabled)
	AuthenticationMethods []AuthenticationMethodsInitParameters `json:"authenticationMethods,omitempty" tf:"authentication_methods,omitempty"`

	// (String) Authorization endpoint.
	// Authorization endpoint.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// (Boolean) Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
	// Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
	BruteForceProtection *bool `json:"bruteForceProtection,omitempty" tf:"brute_force_protection,omitempty"`

	// (String) The strategy's client ID.
	// The strategy's client ID.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) The strategy's client secret.
	// The strategy's client secret.
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (String) Salesforce community base URL.
	// Salesforce community base URL.
	CommunityBaseURL *string `json:"communityBaseUrl,omitempty" tf:"community_base_url,omitempty"`

	Configuration map[string]*string `json:"configurationSecretRef,omitempty" tf:"-"`

	// (Block List, Max: 1) Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection. (see below for nested schema)
	// Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection.
	ConnectionSettings []ConnectionSettingsInitParameters `json:"connectionSettings,omitempty" tf:"connection_settings,omitempty"`

	// (Map of String) A map of scripts used to integrate with a custom database.
	// A map of scripts used to integrate with a custom database.
	// +mapType=granular
	CustomScripts map[string]*string `json:"customScripts,omitempty" tf:"custom_scripts,omitempty"`

	// (Boolean) When enabled, additional debug information will be generated.
	// When enabled, additional debug information will be generated.
	Debug *bool `json:"debug,omitempty" tf:"debug,omitempty"`

	// (Block List, Max: 1) The key used to decrypt encrypted responses from the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)
	// The key used to decrypt encrypted responses from the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
	DecryptionKey []DecryptionKeyInitParameters `json:"decryptionKey,omitempty" tf:"decryption_key,omitempty"`

	// (String) Sign Request Algorithm Digest.
	// Sign Request Algorithm Digest.
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty" tf:"digest_algorithm,omitempty"`

	// (Boolean) Indicates whether to disable the cache or not.
	// Indicates whether to disable the cache or not.
	DisableCache *bool `json:"disableCache,omitempty" tf:"disable_cache,omitempty"`

	// (Boolean) Indicates whether to remove the forgot password link within the New Universal Login.
	// Indicates whether to remove the forgot password link within the New Universal Login.
	DisableSelfServiceChangePassword *bool `json:"disableSelfServiceChangePassword,omitempty" tf:"disable_self_service_change_password,omitempty"`

	// (Boolean) When enabled, will disable sign out.
	// When enabled, will disable sign out.
	DisableSignOut *bool `json:"disableSignOut,omitempty" tf:"disable_sign_out,omitempty"`

	// ups to your application.
	// Indicates whether to allow user sign-ups to your application.
	DisableSignup *bool `json:"disableSignup,omitempty" tf:"disable_signup,omitempty"`

	// known/openid-configuration.
	// OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.
	DiscoveryURL *string `json:"discoveryUrl,omitempty" tf:"discovery_url,omitempty"`

	// (String) Domain name.
	// Domain name.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Set of String) List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
	// List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
	// +listType=set
	DomainAliases []*string `json:"domainAliases,omitempty" tf:"domain_aliases,omitempty"`

	// (Boolean) Set to true to inject context into custom DB scripts (warning: cannot be disabled once enabled).
	// Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).
	EnableScriptContext *bool `json:"enableScriptContext,omitempty" tf:"enable_script_context,omitempty"`

	// (Boolean) Set to true to use a legacy user store.
	// Set to `true` to use a legacy user store.
	EnabledDatabaseCustomization *bool `json:"enabledDatabaseCustomization,omitempty" tf:"enabled_database_customization,omitempty"`

	// (String) Custom Entity ID for the connection.
	// Custom Entity ID for the connection.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) Federation Metadata for the ADFS connection.
	// Federation Metadata for the ADFS connection.
	FedMetadataXML *string `json:"fedMetadataXml,omitempty" tf:"fed_metadata_xml,omitempty"`

	// standard PingFederate Server, you must update the attribute mappings.
	// If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
	FieldsMap *string `json:"fieldsMap,omitempty" tf:"fields_map,omitempty"`

	// (Boolean) Specifies whether or not request info should be forwarded to sms gateway.
	// Specifies whether or not request info should be forwarded to sms gateway.
	ForwardRequestInfo *bool `json:"forwardRequestInfo,omitempty" tf:"forward_request_info,omitempty"`

	// (String) Address to use as the sender.
	// Address to use as the sender.
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (Block List, Max: 1) Defines the parameters used to generate the auth token for the custom gateway. (see below for nested schema)
	// Defines the parameters used to generate the auth token for the custom gateway.
	GatewayAuthentication []GatewayAuthenticationInitParameters `json:"gatewayAuthentication,omitempty" tf:"gateway_authentication,omitempty"`

	// (String) Defines a custom sms gateway to use instead of Twilio.
	// Defines a custom sms gateway to use instead of Twilio.
	GatewayURL *string `json:"gatewayUrl,omitempty" tf:"gateway_url,omitempty"`

	// (String) Specifies the issuer of the JWT used for global token revocation for the SAML connection.
	// Specifies the issuer of the JWT used for global token revocation for the SAML connection.
	GlobalTokenRevocationJwtIss *string `json:"globalTokenRevocationJwtIss,omitempty" tf:"global_token_revocation_jwt_iss,omitempty"`

	// (String) Specifies the subject of the JWT used for global token revocation for the SAML connection.
	// Specifies the subject of the JWT used for global token revocation for the SAML connection.
	GlobalTokenRevocationJwtSub *string `json:"globalTokenRevocationJwtSub,omitempty" tf:"global_token_revocation_jwt_sub,omitempty"`

	// (String) Icon URL.
	// Icon URL.
	IconURL *string `json:"iconUrl,omitempty" tf:"icon_url,omitempty"`

	// identity-platform-v2.0 or azure-active-directory-v1.0.
	// Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.
	IdentityAPI *string `json:"identityApi,omitempty" tf:"identity_api,omitempty"`

	// (Block List, Max: 1) Configuration options for IDP Initiated Authentication. This is an object with the properties: client_id, client_protocol, and client_authorize_query. (see below for nested schema)
	// Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.
	IdpInitiated []IdpInitiatedInitParameters `json:"idpInitiated,omitempty" tf:"idp_initiated,omitempty"`

	// (Boolean) Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
	// Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
	ImportMode *bool `json:"importMode,omitempty" tf:"import_mode,omitempty"`

	// (Set of String) A list of IPs.
	// A list of IPs.
	// +listType=set
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// (String) Issuer URL, e.g. https://auth.example.com.
	// Issuer URL, e.g. `https://auth.example.com`.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) JWKS URI.
	// JWKS URI.
	JwksURI *string `json:"jwksUri,omitempty" tf:"jwks_uri,omitempty"`

	// (String) Apple Key ID.
	// Apple Key ID.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (Boolean) By default Auth0 maps user_id to email. Enabling this setting changes the behavior to map user_id to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
	// By default Auth0 maps `user_id` to `email`. Enabling this setting changes the behavior to map `user_id` to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
	MapUserIDToID *bool `json:"mapUserIdToId,omitempty" tf:"map_user_id_to_id,omitempty"`

	// (String) Maximum number of groups to retrieve.
	// Maximum number of groups to retrieve.
	MaxGroupsToRetrieve *string `json:"maxGroupsToRetrieve,omitempty" tf:"max_groups_to_retrieve,omitempty"`

	// (String) SID for Copilot. Used when SMS Source is Copilot.
	// SID for Copilot. Used when SMS Source is Copilot.
	MessagingServiceSid *string `json:"messagingServiceSid,omitempty" tf:"messaging_service_sid,omitempty"`

	// (String) The URL of the SAML metadata document.
	// The URL of the SAML metadata document.
	MetadataURL *string `json:"metadataUrl,omitempty" tf:"metadata_url,omitempty"`

	// (String) The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
	// The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
	MetadataXML *string `json:"metadataXml,omitempty" tf:"metadata_xml,omitempty"`

	// (Block List, Max: 1) Configuration options for multifactor authentication. (see below for nested schema)
	// Configuration options for multifactor authentication.
	Mfa []MfaInitParameters `json:"mfa,omitempty" tf:"mfa,omitempty"`

	// (String) Name of the connection.
	// The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
	// If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
	// +listType=set
	NonPersistentAttrs []*string `json:"nonPersistentAttrs,omitempty" tf:"non_persistent_attrs,omitempty"`

	// (Block List, Max: 1) Defines options for the passkey authentication method (see below for nested schema)
	// Defines options for the passkey authentication method
	PasskeyOptions []PasskeyOptionsInitParameters `json:"passkeyOptions,omitempty" tf:"passkey_options,omitempty"`

	// (Block List, Max: 1) Configuration settings for password complexity. (see below for nested schema)
	// Configuration settings for password complexity.
	PasswordComplexityOptions []PasswordComplexityOptionsInitParameters `json:"passwordComplexityOptions,omitempty" tf:"password_complexity_options,omitempty"`

	// (Block List, Max: 1) Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. (see below for nested schema)
	// Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.
	PasswordDictionary []PasswordDictionaryInitParameters `json:"passwordDictionary,omitempty" tf:"password_dictionary,omitempty"`

	// (Block List) Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. (see below for nested schema)
	// Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.
	PasswordHistory []PasswordHistoryInitParameters `json:"passwordHistory,omitempty" tf:"password_history,omitempty"`

	// (Block List, Max: 1) Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. (see below for nested schema)
	// Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user's `email`, or first part of the user's `email`.
	PasswordNoPersonalInfo []PasswordNoPersonalInfoInitParameters `json:"passwordNoPersonalInfo,omitempty" tf:"password_no_personal_info,omitempty"`

	// (String) Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include none, low, fair, good, excellent.
	// Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
	PasswordPolicy *string `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`

	// (String) Ping Federate Server URL.
	// Ping Federate Server URL.
	PingFederateBaseURL *string `json:"pingFederateBaseUrl,omitempty" tf:"ping_federate_base_url,omitempty"`

	// (Boolean) Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
	// Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
	PkceEnabled *bool `json:"pkceEnabled,omitempty" tf:"pkce_enabled,omitempty"`

	// (List of String) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	// Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	Precedence []*string `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (String) The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
	// The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
	ProtocolBinding *string `json:"protocolBinding,omitempty" tf:"protocol_binding,omitempty"`

	// (String) Defines the custom sms_gateway provider.
	// Defines the custom `sms_gateway` provider.
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Template that formats the SAML request.
	// Template that formats the SAML request.
	RequestTemplate *string `json:"requestTemplate,omitempty" tf:"request_template,omitempty"`

	// (Boolean) Indicates whether the user is required to provide a username in addition to an email address.
	// Indicates whether the user is required to provide a username in addition to an email address.
	RequiresUsername *bool `json:"requiresUsername,omitempty" tf:"requires_username,omitempty"`

	// (Set of String) Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: basic_profile, ext_profile, ext_nested_groups, etc.
	// Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Map of String) A map of scripts used for an OAuth connection. Only accepts a fetchUserProfile script.
	// A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.
	// +mapType=granular
	Scripts map[string]*string `json:"scripts,omitempty" tf:"scripts,omitempty"`

	// (String) Determines whether to sync user profile attributes (name, given_name, family_name, nickname, picture) at each login or only on the first login. Options include: on_each_login, on_first_login, never_on_login. Default value: on_each_login.
	// Determines whether to sync user profile attributes (`name`, `given_name`, `family_name`, `nickname`, `picture`) at each login or only on the first login. Options include: `on_each_login`, `on_first_login`, `never_on_login`. Default value: `on_each_login`.
	SetUserRootAttributes *string `json:"setUserRootAttributes,omitempty" tf:"set_user_root_attributes,omitempty"`

	// (String) Choose how Auth0 sets the email_verified field in the user profile.
	// Choose how Auth0 sets the email_verified field in the user profile.
	ShouldTrustEmailVerifiedConnection *string `json:"shouldTrustEmailVerifiedConnection,omitempty" tf:"should_trust_email_verified_connection,omitempty"`

	// (String) SAML single login URL for the connection.
	// SAML single login URL for the connection.
	SignInEndpoint *string `json:"signInEndpoint,omitempty" tf:"sign_in_endpoint,omitempty"`

	// (String) SAML single logout URL for the connection.
	// SAML single logout URL for the connection.
	SignOutEndpoint *string `json:"signOutEndpoint,omitempty" tf:"sign_out_endpoint,omitempty"`

	// (Boolean) When enabled, the SAML authentication request will be signed.
	// When enabled, the SAML authentication request will be signed.
	SignSAMLRequest *bool `json:"signSamlRequest,omitempty" tf:"sign_saml_request,omitempty"`

	// (String) Sign Request Algorithm.
	// Sign Request Algorithm.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// encoded.
	// X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
	SigningCert *string `json:"signingCert,omitempty" tf:"signing_cert,omitempty"`

	// (Block List, Max: 1) The key used to sign requests in the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)
	// The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
	SigningKey []SigningKeyInitParameters `json:"signingKey,omitempty" tf:"signing_key,omitempty"`

	// (Number) Version 1 is deprecated, use version 2.
	// Version 1 is deprecated, use version 2.
	StrategyVersion *float64 `json:"strategyVersion,omitempty" tf:"strategy_version,omitempty"`

	// (String) Subject line of the email.
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String) Syntax of the template body.
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" tf:"syntax,omitempty"`

	// (String) Apple Team ID.
	// Apple Team ID.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) Body of the template.
	// Body of the template.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// (String) Tenant domain name.
	// Tenant domain name.
	TenantDomain *string `json:"tenantDomain,omitempty" tf:"tenant_domain,omitempty"`

	// (String) Token endpoint.
	// Token endpoint.
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// time passwords. (see below for nested schema)
	// Configuration options for one-time passwords.
	Totp []TotpInitParameters `json:"totp,omitempty" tf:"totp,omitempty"`

	// (String) SID for your Twilio account.
	// SID for your Twilio account.
	TwilioSid *string `json:"twilioSid,omitempty" tf:"twilio_sid,omitempty"`

	// (String, Sensitive) AuthToken for your Twilio account.
	// AuthToken for your Twilio account.
	TwilioTokenSecretRef *v1.SecretKeySelector `json:"twilioTokenSecretRef,omitempty" tf:"-"`

	// (String) Value can be back_channel or front_channel. Front Channel will use OIDC protocol with response_mode=form_post and response_type=id_token. Back Channel will use response_type=code.
	// Value can be `back_channel` or `front_channel`. Front Channel will use OIDC protocol with `response_mode=form_post` and `response_type=id_token`. Back Channel will use `response_type=code`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
	// You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
	UpstreamParams *string `json:"upstreamParams,omitempty" tf:"upstream_params,omitempty"`

	// (Boolean) Indicates whether to use cert auth or not.
	// Indicates whether to use cert auth or not.
	UseCertAuth *bool `json:"useCertAuth,omitempty" tf:"use_cert_auth,omitempty"`

	// (Boolean) Indicates whether to use Kerberos or not.
	// Indicates whether to use Kerberos or not.
	UseKerberos *bool `json:"useKerberos,omitempty" tf:"use_kerberos,omitempty"`

	// Fed.
	// Whether to use WS-Fed.
	UseWsfed *bool `json:"useWsfed,omitempty" tf:"use_wsfed,omitempty"`

	// (String) Attribute in the token that will be mapped to the user_id property in Auth0.
	// Attribute in the token that will be mapped to the user_id property in Auth0.
	UserIDAttribute *string `json:"userIdAttribute,omitempty" tf:"user_id_attribute,omitempty"`

	// (String) User info endpoint.
	// User info endpoint.
	UserinfoEndpoint *string `json:"userinfoEndpoint,omitempty" tf:"userinfo_endpoint,omitempty"`

	// (Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)
	// Validation of the minimum and maximum values allowed for a user to have as username.
	Validation []OptionsValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// tenant application in Azure AD.
	// Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
	WaadCommonEndpoint *bool `json:"waadCommonEndpoint,omitempty" tf:"waad_common_endpoint,omitempty"`

	// (String) Protocol to use.
	// Protocol to use.
	WaadProtocol *string `json:"waadProtocol,omitempty" tf:"waad_protocol,omitempty"`
}

type OptionsObservation struct {

	// (Boolean) Enable API Access to users.
	// Enable API Access to users.
	APIEnableUsers *bool `json:"apiEnableUsers,omitempty" tf:"api_enable_users,omitempty"`

	// (String) ADFS URL where to fetch the metadata source.
	// ADFS URL where to fetch the metadata source.
	AdfsServer *string `json:"adfsServer,omitempty" tf:"adfs_server,omitempty"`

	// (Set of String) List of allowed audiences.
	// List of allowed audiences.
	// +listType=set
	AllowedAudiences []*string `json:"allowedAudiences,omitempty" tf:"allowed_audiences,omitempty"`

	// (String) App ID.
	// App ID.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (Block List, Max: 1) OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click here for more info. (see below for nested schema)
	// OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click [here](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/configure-pkce-claim-mapping-for-oidc#map-claims-for-oidc-connections) for more info.
	AttributeMap []AttributeMapObservation `json:"attributeMap,omitempty" tf:"attribute_map,omitempty"`

	// (Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)
	// Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	Attributes []AttributesObservation `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (Map of String) Query string parameters to be included as part of the generated passwordless email link.
	// Query string parameters to be included as part of the generated passwordless email link.
	// +mapType=granular
	AuthParams map[string]*string `json:"authParams,omitempty" tf:"auth_params,omitempty"`

	// (Block List) Specifies the authentication methods and their configuration (enabled or disabled) (see below for nested schema)
	// Specifies the authentication methods and their configuration (enabled or disabled)
	AuthenticationMethods []AuthenticationMethodsObservation `json:"authenticationMethods,omitempty" tf:"authentication_methods,omitempty"`

	// (String) Authorization endpoint.
	// Authorization endpoint.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// (Boolean) Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
	// Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
	BruteForceProtection *bool `json:"bruteForceProtection,omitempty" tf:"brute_force_protection,omitempty"`

	// (String) The strategy's client ID.
	// The strategy's client ID.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) Salesforce community base URL.
	// Salesforce community base URL.
	CommunityBaseURL *string `json:"communityBaseUrl,omitempty" tf:"community_base_url,omitempty"`

	// (Block List, Max: 1) Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection. (see below for nested schema)
	// Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection.
	ConnectionSettings []ConnectionSettingsObservation `json:"connectionSettings,omitempty" tf:"connection_settings,omitempty"`

	// (Map of String) A map of scripts used to integrate with a custom database.
	// A map of scripts used to integrate with a custom database.
	// +mapType=granular
	CustomScripts map[string]*string `json:"customScripts,omitempty" tf:"custom_scripts,omitempty"`

	// (Boolean) When enabled, additional debug information will be generated.
	// When enabled, additional debug information will be generated.
	Debug *bool `json:"debug,omitempty" tf:"debug,omitempty"`

	// (Block List, Max: 1) The key used to decrypt encrypted responses from the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)
	// The key used to decrypt encrypted responses from the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
	DecryptionKey []DecryptionKeyObservation `json:"decryptionKey,omitempty" tf:"decryption_key,omitempty"`

	// (String) Sign Request Algorithm Digest.
	// Sign Request Algorithm Digest.
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty" tf:"digest_algorithm,omitempty"`

	// (Boolean) Indicates whether to disable the cache or not.
	// Indicates whether to disable the cache or not.
	DisableCache *bool `json:"disableCache,omitempty" tf:"disable_cache,omitempty"`

	// (Boolean) Indicates whether to remove the forgot password link within the New Universal Login.
	// Indicates whether to remove the forgot password link within the New Universal Login.
	DisableSelfServiceChangePassword *bool `json:"disableSelfServiceChangePassword,omitempty" tf:"disable_self_service_change_password,omitempty"`

	// (Boolean) When enabled, will disable sign out.
	// When enabled, will disable sign out.
	DisableSignOut *bool `json:"disableSignOut,omitempty" tf:"disable_sign_out,omitempty"`

	// ups to your application.
	// Indicates whether to allow user sign-ups to your application.
	DisableSignup *bool `json:"disableSignup,omitempty" tf:"disable_signup,omitempty"`

	// known/openid-configuration.
	// OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.
	DiscoveryURL *string `json:"discoveryUrl,omitempty" tf:"discovery_url,omitempty"`

	// (String) Domain name.
	// Domain name.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Set of String) List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
	// List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
	// +listType=set
	DomainAliases []*string `json:"domainAliases,omitempty" tf:"domain_aliases,omitempty"`

	// (Boolean) Set to true to inject context into custom DB scripts (warning: cannot be disabled once enabled).
	// Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).
	EnableScriptContext *bool `json:"enableScriptContext,omitempty" tf:"enable_script_context,omitempty"`

	// (Boolean) Set to true to use a legacy user store.
	// Set to `true` to use a legacy user store.
	EnabledDatabaseCustomization *bool `json:"enabledDatabaseCustomization,omitempty" tf:"enabled_database_customization,omitempty"`

	// (String) Custom Entity ID for the connection.
	// Custom Entity ID for the connection.
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) Federation Metadata for the ADFS connection.
	// Federation Metadata for the ADFS connection.
	FedMetadataXML *string `json:"fedMetadataXml,omitempty" tf:"fed_metadata_xml,omitempty"`

	// standard PingFederate Server, you must update the attribute mappings.
	// If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
	FieldsMap *string `json:"fieldsMap,omitempty" tf:"fields_map,omitempty"`

	// (Boolean) Specifies whether or not request info should be forwarded to sms gateway.
	// Specifies whether or not request info should be forwarded to sms gateway.
	ForwardRequestInfo *bool `json:"forwardRequestInfo,omitempty" tf:"forward_request_info,omitempty"`

	// (String) Address to use as the sender.
	// Address to use as the sender.
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (Block List, Max: 1) Defines the parameters used to generate the auth token for the custom gateway. (see below for nested schema)
	// Defines the parameters used to generate the auth token for the custom gateway.
	GatewayAuthentication []GatewayAuthenticationObservation `json:"gatewayAuthentication,omitempty" tf:"gateway_authentication,omitempty"`

	// (String) Defines a custom sms gateway to use instead of Twilio.
	// Defines a custom sms gateway to use instead of Twilio.
	GatewayURL *string `json:"gatewayUrl,omitempty" tf:"gateway_url,omitempty"`

	// (String) Specifies the issuer of the JWT used for global token revocation for the SAML connection.
	// Specifies the issuer of the JWT used for global token revocation for the SAML connection.
	GlobalTokenRevocationJwtIss *string `json:"globalTokenRevocationJwtIss,omitempty" tf:"global_token_revocation_jwt_iss,omitempty"`

	// (String) Specifies the subject of the JWT used for global token revocation for the SAML connection.
	// Specifies the subject of the JWT used for global token revocation for the SAML connection.
	GlobalTokenRevocationJwtSub *string `json:"globalTokenRevocationJwtSub,omitempty" tf:"global_token_revocation_jwt_sub,omitempty"`

	// (String) Icon URL.
	// Icon URL.
	IconURL *string `json:"iconUrl,omitempty" tf:"icon_url,omitempty"`

	// identity-platform-v2.0 or azure-active-directory-v1.0.
	// Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.
	IdentityAPI *string `json:"identityApi,omitempty" tf:"identity_api,omitempty"`

	// (Block List, Max: 1) Configuration options for IDP Initiated Authentication. This is an object with the properties: client_id, client_protocol, and client_authorize_query. (see below for nested schema)
	// Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.
	IdpInitiated []IdpInitiatedObservation `json:"idpInitiated,omitempty" tf:"idp_initiated,omitempty"`

	// (Boolean) Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
	// Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
	ImportMode *bool `json:"importMode,omitempty" tf:"import_mode,omitempty"`

	// (Set of String) A list of IPs.
	// A list of IPs.
	// +listType=set
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// (String) Issuer URL, e.g. https://auth.example.com.
	// Issuer URL, e.g. `https://auth.example.com`.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) JWKS URI.
	// JWKS URI.
	JwksURI *string `json:"jwksUri,omitempty" tf:"jwks_uri,omitempty"`

	// (String) Apple Key ID.
	// Apple Key ID.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (Boolean) By default Auth0 maps user_id to email. Enabling this setting changes the behavior to map user_id to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
	// By default Auth0 maps `user_id` to `email`. Enabling this setting changes the behavior to map `user_id` to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
	MapUserIDToID *bool `json:"mapUserIdToId,omitempty" tf:"map_user_id_to_id,omitempty"`

	// (String) Maximum number of groups to retrieve.
	// Maximum number of groups to retrieve.
	MaxGroupsToRetrieve *string `json:"maxGroupsToRetrieve,omitempty" tf:"max_groups_to_retrieve,omitempty"`

	// (String) SID for Copilot. Used when SMS Source is Copilot.
	// SID for Copilot. Used when SMS Source is Copilot.
	MessagingServiceSid *string `json:"messagingServiceSid,omitempty" tf:"messaging_service_sid,omitempty"`

	// (String) The URL of the SAML metadata document.
	// The URL of the SAML metadata document.
	MetadataURL *string `json:"metadataUrl,omitempty" tf:"metadata_url,omitempty"`

	// (String) The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
	// The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
	MetadataXML *string `json:"metadataXml,omitempty" tf:"metadata_xml,omitempty"`

	// (Block List, Max: 1) Configuration options for multifactor authentication. (see below for nested schema)
	// Configuration options for multifactor authentication.
	Mfa []MfaObservation `json:"mfa,omitempty" tf:"mfa,omitempty"`

	// (String) Name of the connection.
	// The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
	// If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
	// +listType=set
	NonPersistentAttrs []*string `json:"nonPersistentAttrs,omitempty" tf:"non_persistent_attrs,omitempty"`

	// (Block List, Max: 1) Defines options for the passkey authentication method (see below for nested schema)
	// Defines options for the passkey authentication method
	PasskeyOptions []PasskeyOptionsObservation `json:"passkeyOptions,omitempty" tf:"passkey_options,omitempty"`

	// (Block List, Max: 1) Configuration settings for password complexity. (see below for nested schema)
	// Configuration settings for password complexity.
	PasswordComplexityOptions []PasswordComplexityOptionsObservation `json:"passwordComplexityOptions,omitempty" tf:"password_complexity_options,omitempty"`

	// (Block List, Max: 1) Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. (see below for nested schema)
	// Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.
	PasswordDictionary []PasswordDictionaryObservation `json:"passwordDictionary,omitempty" tf:"password_dictionary,omitempty"`

	// (Block List) Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. (see below for nested schema)
	// Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.
	PasswordHistory []PasswordHistoryObservation `json:"passwordHistory,omitempty" tf:"password_history,omitempty"`

	// (Block List, Max: 1) Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. (see below for nested schema)
	// Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user's `email`, or first part of the user's `email`.
	PasswordNoPersonalInfo []PasswordNoPersonalInfoObservation `json:"passwordNoPersonalInfo,omitempty" tf:"password_no_personal_info,omitempty"`

	// (String) Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include none, low, fair, good, excellent.
	// Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
	PasswordPolicy *string `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`

	// (String) Ping Federate Server URL.
	// Ping Federate Server URL.
	PingFederateBaseURL *string `json:"pingFederateBaseUrl,omitempty" tf:"ping_federate_base_url,omitempty"`

	// (Boolean) Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
	// Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
	PkceEnabled *bool `json:"pkceEnabled,omitempty" tf:"pkce_enabled,omitempty"`

	// (List of String) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	// Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	Precedence []*string `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (String) The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
	// The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
	ProtocolBinding *string `json:"protocolBinding,omitempty" tf:"protocol_binding,omitempty"`

	// (String) Defines the custom sms_gateway provider.
	// Defines the custom `sms_gateway` provider.
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Template that formats the SAML request.
	// Template that formats the SAML request.
	RequestTemplate *string `json:"requestTemplate,omitempty" tf:"request_template,omitempty"`

	// (Boolean) Indicates whether the user is required to provide a username in addition to an email address.
	// Indicates whether the user is required to provide a username in addition to an email address.
	RequiresUsername *bool `json:"requiresUsername,omitempty" tf:"requires_username,omitempty"`

	// (Set of String) Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: basic_profile, ext_profile, ext_nested_groups, etc.
	// Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Map of String) A map of scripts used for an OAuth connection. Only accepts a fetchUserProfile script.
	// A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.
	// +mapType=granular
	Scripts map[string]*string `json:"scripts,omitempty" tf:"scripts,omitempty"`

	// (String) Determines whether to sync user profile attributes (name, given_name, family_name, nickname, picture) at each login or only on the first login. Options include: on_each_login, on_first_login, never_on_login. Default value: on_each_login.
	// Determines whether to sync user profile attributes (`name`, `given_name`, `family_name`, `nickname`, `picture`) at each login or only on the first login. Options include: `on_each_login`, `on_first_login`, `never_on_login`. Default value: `on_each_login`.
	SetUserRootAttributes *string `json:"setUserRootAttributes,omitempty" tf:"set_user_root_attributes,omitempty"`

	// (String) Choose how Auth0 sets the email_verified field in the user profile.
	// Choose how Auth0 sets the email_verified field in the user profile.
	ShouldTrustEmailVerifiedConnection *string `json:"shouldTrustEmailVerifiedConnection,omitempty" tf:"should_trust_email_verified_connection,omitempty"`

	// (String) SAML single login URL for the connection.
	// SAML single login URL for the connection.
	SignInEndpoint *string `json:"signInEndpoint,omitempty" tf:"sign_in_endpoint,omitempty"`

	// (String) SAML single logout URL for the connection.
	// SAML single logout URL for the connection.
	SignOutEndpoint *string `json:"signOutEndpoint,omitempty" tf:"sign_out_endpoint,omitempty"`

	// (Boolean) When enabled, the SAML authentication request will be signed.
	// When enabled, the SAML authentication request will be signed.
	SignSAMLRequest *bool `json:"signSamlRequest,omitempty" tf:"sign_saml_request,omitempty"`

	// (String) Sign Request Algorithm.
	// Sign Request Algorithm.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// encoded.
	// X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
	SigningCert *string `json:"signingCert,omitempty" tf:"signing_cert,omitempty"`

	// (Block List, Max: 1) The key used to sign requests in the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)
	// The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
	SigningKey []SigningKeyObservation `json:"signingKey,omitempty" tf:"signing_key,omitempty"`

	// (Number) Version 1 is deprecated, use version 2.
	// Version 1 is deprecated, use version 2.
	StrategyVersion *float64 `json:"strategyVersion,omitempty" tf:"strategy_version,omitempty"`

	// (String) Subject line of the email.
	// Subject line of the email.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String) Syntax of the template body.
	// Syntax of the template body.
	Syntax *string `json:"syntax,omitempty" tf:"syntax,omitempty"`

	// (String) Apple Team ID.
	// Apple Team ID.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) Body of the template.
	// Body of the template.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// (String) Tenant domain name.
	// Tenant domain name.
	TenantDomain *string `json:"tenantDomain,omitempty" tf:"tenant_domain,omitempty"`

	// (String) Token endpoint.
	// Token endpoint.
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// time passwords. (see below for nested schema)
	// Configuration options for one-time passwords.
	Totp []TotpObservation `json:"totp,omitempty" tf:"totp,omitempty"`

	// (String) SID for your Twilio account.
	// SID for your Twilio account.
	TwilioSid *string `json:"twilioSid,omitempty" tf:"twilio_sid,omitempty"`

	// (String) Value can be back_channel or front_channel. Front Channel will use OIDC protocol with response_mode=form_post and response_type=id_token. Back Channel will use response_type=code.
	// Value can be `back_channel` or `front_channel`. Front Channel will use OIDC protocol with `response_mode=form_post` and `response_type=id_token`. Back Channel will use `response_type=code`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
	// You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
	UpstreamParams *string `json:"upstreamParams,omitempty" tf:"upstream_params,omitempty"`

	// (Boolean) Indicates whether to use cert auth or not.
	// Indicates whether to use cert auth or not.
	UseCertAuth *bool `json:"useCertAuth,omitempty" tf:"use_cert_auth,omitempty"`

	// (Boolean) Indicates whether to use Kerberos or not.
	// Indicates whether to use Kerberos or not.
	UseKerberos *bool `json:"useKerberos,omitempty" tf:"use_kerberos,omitempty"`

	// Fed.
	// Whether to use WS-Fed.
	UseWsfed *bool `json:"useWsfed,omitempty" tf:"use_wsfed,omitempty"`

	// (String) Attribute in the token that will be mapped to the user_id property in Auth0.
	// Attribute in the token that will be mapped to the user_id property in Auth0.
	UserIDAttribute *string `json:"userIdAttribute,omitempty" tf:"user_id_attribute,omitempty"`

	// (String) User info endpoint.
	// User info endpoint.
	UserinfoEndpoint *string `json:"userinfoEndpoint,omitempty" tf:"userinfo_endpoint,omitempty"`

	// (Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)
	// Validation of the minimum and maximum values allowed for a user to have as username.
	Validation []OptionsValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// tenant application in Azure AD.
	// Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
	WaadCommonEndpoint *bool `json:"waadCommonEndpoint,omitempty" tf:"waad_common_endpoint,omitempty"`

	// (String) Protocol to use.
	// Protocol to use.
	WaadProtocol *string `json:"waadProtocol,omitempty" tf:"waad_protocol,omitempty"`
}

type OptionsParameters struct {

	// (Boolean) Enable API Access to users.
	// Enable API Access to users.
	// +kubebuilder:validation:Optional
	APIEnableUsers *bool `json:"apiEnableUsers,omitempty" tf:"api_enable_users,omitempty"`

	// (String) ADFS URL where to fetch the metadata source.
	// ADFS URL where to fetch the metadata source.
	// +kubebuilder:validation:Optional
	AdfsServer *string `json:"adfsServer,omitempty" tf:"adfs_server,omitempty"`

	// (Set of String) List of allowed audiences.
	// List of allowed audiences.
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedAudiences []*string `json:"allowedAudiences,omitempty" tf:"allowed_audiences,omitempty"`

	// (String) App ID.
	// App ID.
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (Block List, Max: 1) OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click here for more info. (see below for nested schema)
	// OpenID Connect and Okta Workforce connections can automatically map claims received from the identity provider (IdP). You can configure this mapping through a library template provided by Auth0 or by entering your own template directly. Click [here](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/configure-pkce-claim-mapping-for-oidc#map-claims-for-oidc-connections) for more info.
	// +kubebuilder:validation:Optional
	AttributeMap []AttributeMapParameters `json:"attributeMap,omitempty" tf:"attribute_map,omitempty"`

	// (Block List) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order (see below for nested schema)
	// Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	// +kubebuilder:validation:Optional
	Attributes []AttributesParameters `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// (Map of String) Query string parameters to be included as part of the generated passwordless email link.
	// Query string parameters to be included as part of the generated passwordless email link.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AuthParams map[string]*string `json:"authParams,omitempty" tf:"auth_params,omitempty"`

	// (Block List) Specifies the authentication methods and their configuration (enabled or disabled) (see below for nested schema)
	// Specifies the authentication methods and their configuration (enabled or disabled)
	// +kubebuilder:validation:Optional
	AuthenticationMethods []AuthenticationMethodsParameters `json:"authenticationMethods,omitempty" tf:"authentication_methods,omitempty"`

	// (String) Authorization endpoint.
	// Authorization endpoint.
	// +kubebuilder:validation:Optional
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty" tf:"authorization_endpoint,omitempty"`

	// (Boolean) Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
	// Indicates whether to enable brute force protection, which will limit the number of signups and failed logins from a suspicious IP address.
	// +kubebuilder:validation:Optional
	BruteForceProtection *bool `json:"bruteForceProtection,omitempty" tf:"brute_force_protection,omitempty"`

	// (String) The strategy's client ID.
	// The strategy's client ID.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) The strategy's client secret.
	// The strategy's client secret.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (String) Salesforce community base URL.
	// Salesforce community base URL.
	// +kubebuilder:validation:Optional
	CommunityBaseURL *string `json:"communityBaseUrl,omitempty" tf:"community_base_url,omitempty"`

	// sensitive map of key value pairs used as configuration variables for the custom_script.
	// A case-sensitive map of key value pairs used as configuration variables for the `custom_script`.
	// +kubebuilder:validation:Optional
	ConfigurationSecretRef *v1.SecretReference `json:"configurationSecretRef,omitempty" tf:"-"`

	// (Block List, Max: 1) Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection. (see below for nested schema)
	// Proof Key for Code Exchange (PKCE) configuration settings for an OIDC or Okta Workforce connection.
	// +kubebuilder:validation:Optional
	ConnectionSettings []ConnectionSettingsParameters `json:"connectionSettings,omitempty" tf:"connection_settings,omitempty"`

	// (Map of String) A map of scripts used to integrate with a custom database.
	// A map of scripts used to integrate with a custom database.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	CustomScripts map[string]*string `json:"customScripts,omitempty" tf:"custom_scripts,omitempty"`

	// (Boolean) When enabled, additional debug information will be generated.
	// When enabled, additional debug information will be generated.
	// +kubebuilder:validation:Optional
	Debug *bool `json:"debug,omitempty" tf:"debug,omitempty"`

	// (Block List, Max: 1) The key used to decrypt encrypted responses from the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)
	// The key used to decrypt encrypted responses from the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
	// +kubebuilder:validation:Optional
	DecryptionKey []DecryptionKeyParameters `json:"decryptionKey,omitempty" tf:"decryption_key,omitempty"`

	// (String) Sign Request Algorithm Digest.
	// Sign Request Algorithm Digest.
	// +kubebuilder:validation:Optional
	DigestAlgorithm *string `json:"digestAlgorithm,omitempty" tf:"digest_algorithm,omitempty"`

	// (Boolean) Indicates whether to disable the cache or not.
	// Indicates whether to disable the cache or not.
	// +kubebuilder:validation:Optional
	DisableCache *bool `json:"disableCache,omitempty" tf:"disable_cache,omitempty"`

	// (Boolean) Indicates whether to remove the forgot password link within the New Universal Login.
	// Indicates whether to remove the forgot password link within the New Universal Login.
	// +kubebuilder:validation:Optional
	DisableSelfServiceChangePassword *bool `json:"disableSelfServiceChangePassword,omitempty" tf:"disable_self_service_change_password,omitempty"`

	// (Boolean) When enabled, will disable sign out.
	// When enabled, will disable sign out.
	// +kubebuilder:validation:Optional
	DisableSignOut *bool `json:"disableSignOut,omitempty" tf:"disable_sign_out,omitempty"`

	// ups to your application.
	// Indicates whether to allow user sign-ups to your application.
	// +kubebuilder:validation:Optional
	DisableSignup *bool `json:"disableSignup,omitempty" tf:"disable_signup,omitempty"`

	// known/openid-configuration.
	// OpenID discovery URL, e.g. `https://auth.example.com/.well-known/openid-configuration`.
	// +kubebuilder:validation:Optional
	DiscoveryURL *string `json:"discoveryUrl,omitempty" tf:"discovery_url,omitempty"`

	// (String) Domain name.
	// Domain name.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Set of String) List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
	// List of the domains that can be authenticated using the identity provider. Only needed for Identifier First authentication flows.
	// +kubebuilder:validation:Optional
	// +listType=set
	DomainAliases []*string `json:"domainAliases,omitempty" tf:"domain_aliases,omitempty"`

	// (Boolean) Set to true to inject context into custom DB scripts (warning: cannot be disabled once enabled).
	// Set to `true` to inject context into custom DB scripts (warning: cannot be disabled once enabled).
	// +kubebuilder:validation:Optional
	EnableScriptContext *bool `json:"enableScriptContext,omitempty" tf:"enable_script_context,omitempty"`

	// (Boolean) Set to true to use a legacy user store.
	// Set to `true` to use a legacy user store.
	// +kubebuilder:validation:Optional
	EnabledDatabaseCustomization *bool `json:"enabledDatabaseCustomization,omitempty" tf:"enabled_database_customization,omitempty"`

	// (String) Custom Entity ID for the connection.
	// Custom Entity ID for the connection.
	// +kubebuilder:validation:Optional
	EntityID *string `json:"entityId,omitempty" tf:"entity_id,omitempty"`

	// (String) Federation Metadata for the ADFS connection.
	// Federation Metadata for the ADFS connection.
	// +kubebuilder:validation:Optional
	FedMetadataXML *string `json:"fedMetadataXml,omitempty" tf:"fed_metadata_xml,omitempty"`

	// standard PingFederate Server, you must update the attribute mappings.
	// If you're configuring a SAML enterprise connection for a non-standard PingFederate Server, you must update the attribute mappings.
	// +kubebuilder:validation:Optional
	FieldsMap *string `json:"fieldsMap,omitempty" tf:"fields_map,omitempty"`

	// (Boolean) Specifies whether or not request info should be forwarded to sms gateway.
	// Specifies whether or not request info should be forwarded to sms gateway.
	// +kubebuilder:validation:Optional
	ForwardRequestInfo *bool `json:"forwardRequestInfo,omitempty" tf:"forward_request_info,omitempty"`

	// (String) Address to use as the sender.
	// Address to use as the sender.
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (Block List, Max: 1) Defines the parameters used to generate the auth token for the custom gateway. (see below for nested schema)
	// Defines the parameters used to generate the auth token for the custom gateway.
	// +kubebuilder:validation:Optional
	GatewayAuthentication []GatewayAuthenticationParameters `json:"gatewayAuthentication,omitempty" tf:"gateway_authentication,omitempty"`

	// (String) Defines a custom sms gateway to use instead of Twilio.
	// Defines a custom sms gateway to use instead of Twilio.
	// +kubebuilder:validation:Optional
	GatewayURL *string `json:"gatewayUrl,omitempty" tf:"gateway_url,omitempty"`

	// (String) Specifies the issuer of the JWT used for global token revocation for the SAML connection.
	// Specifies the issuer of the JWT used for global token revocation for the SAML connection.
	// +kubebuilder:validation:Optional
	GlobalTokenRevocationJwtIss *string `json:"globalTokenRevocationJwtIss,omitempty" tf:"global_token_revocation_jwt_iss,omitempty"`

	// (String) Specifies the subject of the JWT used for global token revocation for the SAML connection.
	// Specifies the subject of the JWT used for global token revocation for the SAML connection.
	// +kubebuilder:validation:Optional
	GlobalTokenRevocationJwtSub *string `json:"globalTokenRevocationJwtSub,omitempty" tf:"global_token_revocation_jwt_sub,omitempty"`

	// (String) Icon URL.
	// Icon URL.
	// +kubebuilder:validation:Optional
	IconURL *string `json:"iconUrl,omitempty" tf:"icon_url,omitempty"`

	// identity-platform-v2.0 or azure-active-directory-v1.0.
	// Azure AD Identity API. Available options are: `microsoft-identity-platform-v2.0` or `azure-active-directory-v1.0`.
	// +kubebuilder:validation:Optional
	IdentityAPI *string `json:"identityApi,omitempty" tf:"identity_api,omitempty"`

	// (Block List, Max: 1) Configuration options for IDP Initiated Authentication. This is an object with the properties: client_id, client_protocol, and client_authorize_query. (see below for nested schema)
	// Configuration options for IDP Initiated Authentication. This is an object with the properties: `client_id`, `client_protocol`, and `client_authorize_query`.
	// +kubebuilder:validation:Optional
	IdpInitiated []IdpInitiatedParameters `json:"idpInitiated,omitempty" tf:"idp_initiated,omitempty"`

	// (Boolean) Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
	// Indicates whether you have a legacy user store and want to gradually migrate those users to the Auth0 user store.
	// +kubebuilder:validation:Optional
	ImportMode *bool `json:"importMode,omitempty" tf:"import_mode,omitempty"`

	// (Set of String) A list of IPs.
	// A list of IPs.
	// +kubebuilder:validation:Optional
	// +listType=set
	Ips []*string `json:"ips,omitempty" tf:"ips,omitempty"`

	// (String) Issuer URL, e.g. https://auth.example.com.
	// Issuer URL, e.g. `https://auth.example.com`.
	// +kubebuilder:validation:Optional
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) JWKS URI.
	// JWKS URI.
	// +kubebuilder:validation:Optional
	JwksURI *string `json:"jwksUri,omitempty" tf:"jwks_uri,omitempty"`

	// (String) Apple Key ID.
	// Apple Key ID.
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (Boolean) By default Auth0 maps user_id to email. Enabling this setting changes the behavior to map user_id to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
	// By default Auth0 maps `user_id` to `email`. Enabling this setting changes the behavior to map `user_id` to 'id' instead. This can only be defined on a new Google Workspace connection and can not be changed once set.
	// +kubebuilder:validation:Optional
	MapUserIDToID *bool `json:"mapUserIdToId,omitempty" tf:"map_user_id_to_id,omitempty"`

	// (String) Maximum number of groups to retrieve.
	// Maximum number of groups to retrieve.
	// +kubebuilder:validation:Optional
	MaxGroupsToRetrieve *string `json:"maxGroupsToRetrieve,omitempty" tf:"max_groups_to_retrieve,omitempty"`

	// (String) SID for Copilot. Used when SMS Source is Copilot.
	// SID for Copilot. Used when SMS Source is Copilot.
	// +kubebuilder:validation:Optional
	MessagingServiceSid *string `json:"messagingServiceSid,omitempty" tf:"messaging_service_sid,omitempty"`

	// (String) The URL of the SAML metadata document.
	// The URL of the SAML metadata document.
	// +kubebuilder:validation:Optional
	MetadataURL *string `json:"metadataUrl,omitempty" tf:"metadata_url,omitempty"`

	// (String) The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
	// The XML content for the SAML metadata document. Values within the xml will take precedence over other attributes set on the options block.
	// +kubebuilder:validation:Optional
	MetadataXML *string `json:"metadataXml,omitempty" tf:"metadata_xml,omitempty"`

	// (Block List, Max: 1) Configuration options for multifactor authentication. (see below for nested schema)
	// Configuration options for multifactor authentication.
	// +kubebuilder:validation:Optional
	Mfa []MfaParameters `json:"mfa,omitempty" tf:"mfa,omitempty"`

	// (String) Name of the connection.
	// The public name of the email or SMS Connection. In most cases this is the same name as the connection name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
	// If there are user fields that should not be stored in Auth0 databases due to privacy reasons, you can add them to the DenyList here.
	// +kubebuilder:validation:Optional
	// +listType=set
	NonPersistentAttrs []*string `json:"nonPersistentAttrs,omitempty" tf:"non_persistent_attrs,omitempty"`

	// (Block List, Max: 1) Defines options for the passkey authentication method (see below for nested schema)
	// Defines options for the passkey authentication method
	// +kubebuilder:validation:Optional
	PasskeyOptions []PasskeyOptionsParameters `json:"passkeyOptions,omitempty" tf:"passkey_options,omitempty"`

	// (Block List, Max: 1) Configuration settings for password complexity. (see below for nested schema)
	// Configuration settings for password complexity.
	// +kubebuilder:validation:Optional
	PasswordComplexityOptions []PasswordComplexityOptionsParameters `json:"passwordComplexityOptions,omitempty" tf:"password_complexity_options,omitempty"`

	// (Block List, Max: 1) Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary. (see below for nested schema)
	// Configuration settings for the password dictionary check, which does not allow passwords that are part of the password dictionary.
	// +kubebuilder:validation:Optional
	PasswordDictionary []PasswordDictionaryParameters `json:"passwordDictionary,omitempty" tf:"password_dictionary,omitempty"`

	// (Block List) Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords. (see below for nested schema)
	// Configuration settings for the password history that is maintained for each user to prevent the reuse of passwords.
	// +kubebuilder:validation:Optional
	PasswordHistory []PasswordHistoryParameters `json:"passwordHistory,omitempty" tf:"password_history,omitempty"`

	// (Block List, Max: 1) Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's name, username, nickname, user_metadata.name, user_metadata.first, user_metadata.last, user's email, or first part of the user's email. (see below for nested schema)
	// Configuration settings for the password personal info check, which does not allow passwords that contain any part of the user's personal data, including user's `name`, `username`, `nickname`, `user_metadata.name`, `user_metadata.first`, `user_metadata.last`, user's `email`, or first part of the user's `email`.
	// +kubebuilder:validation:Optional
	PasswordNoPersonalInfo []PasswordNoPersonalInfoParameters `json:"passwordNoPersonalInfo,omitempty" tf:"password_no_personal_info,omitempty"`

	// (String) Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include none, low, fair, good, excellent.
	// Indicates level of password strength to enforce during authentication. A strong password policy will make it difficult, if not improbable, for someone to guess a password through either manual or automated means. Options include `none`, `low`, `fair`, `good`, `excellent`.
	// +kubebuilder:validation:Optional
	PasswordPolicy *string `json:"passwordPolicy,omitempty" tf:"password_policy,omitempty"`

	// (String) Ping Federate Server URL.
	// Ping Federate Server URL.
	// +kubebuilder:validation:Optional
	PingFederateBaseURL *string `json:"pingFederateBaseUrl,omitempty" tf:"ping_federate_base_url,omitempty"`

	// (Boolean) Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
	// Enables Proof Key for Code Exchange (PKCE) functionality for OAuth2 connections.
	// +kubebuilder:validation:Optional
	PkceEnabled *bool `json:"pkceEnabled,omitempty" tf:"pkce_enabled,omitempty"`

	// (List of String) Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	// Order of attributes for precedence in identification.Valid values: email, phone_number, username. If Precedence is set, it must contain all values (email, phone_number, username) in specific order
	// +kubebuilder:validation:Optional
	Precedence []*string `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// (String) The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
	// The SAML Response Binding: how the SAML token is received by Auth0 from the IdP.
	// +kubebuilder:validation:Optional
	ProtocolBinding *string `json:"protocolBinding,omitempty" tf:"protocol_binding,omitempty"`

	// (String) Defines the custom sms_gateway provider.
	// Defines the custom `sms_gateway` provider.
	// +kubebuilder:validation:Optional
	Provider *string `json:"provider,omitempty" tf:"provider,omitempty"`

	// (String) Template that formats the SAML request.
	// Template that formats the SAML request.
	// +kubebuilder:validation:Optional
	RequestTemplate *string `json:"requestTemplate,omitempty" tf:"request_template,omitempty"`

	// (Boolean) Indicates whether the user is required to provide a username in addition to an email address.
	// Indicates whether the user is required to provide a username in addition to an email address.
	// +kubebuilder:validation:Optional
	RequiresUsername *bool `json:"requiresUsername,omitempty" tf:"requires_username,omitempty"`

	// (Set of String) Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: basic_profile, ext_profile, ext_nested_groups, etc.
	// Permissions to grant to the connection. Within the Auth0 dashboard these appear under the "Attributes" and "Extended Attributes" sections. Some examples: `basic_profile`, `ext_profile`, `ext_nested_groups`, etc.
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (Map of String) A map of scripts used for an OAuth connection. Only accepts a fetchUserProfile script.
	// A map of scripts used for an OAuth connection. Only accepts a `fetchUserProfile` script.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Scripts map[string]*string `json:"scripts,omitempty" tf:"scripts,omitempty"`

	// (String) Determines whether to sync user profile attributes (name, given_name, family_name, nickname, picture) at each login or only on the first login. Options include: on_each_login, on_first_login, never_on_login. Default value: on_each_login.
	// Determines whether to sync user profile attributes (`name`, `given_name`, `family_name`, `nickname`, `picture`) at each login or only on the first login. Options include: `on_each_login`, `on_first_login`, `never_on_login`. Default value: `on_each_login`.
	// +kubebuilder:validation:Optional
	SetUserRootAttributes *string `json:"setUserRootAttributes,omitempty" tf:"set_user_root_attributes,omitempty"`

	// (String) Choose how Auth0 sets the email_verified field in the user profile.
	// Choose how Auth0 sets the email_verified field in the user profile.
	// +kubebuilder:validation:Optional
	ShouldTrustEmailVerifiedConnection *string `json:"shouldTrustEmailVerifiedConnection,omitempty" tf:"should_trust_email_verified_connection,omitempty"`

	// (String) SAML single login URL for the connection.
	// SAML single login URL for the connection.
	// +kubebuilder:validation:Optional
	SignInEndpoint *string `json:"signInEndpoint,omitempty" tf:"sign_in_endpoint,omitempty"`

	// (String) SAML single logout URL for the connection.
	// SAML single logout URL for the connection.
	// +kubebuilder:validation:Optional
	SignOutEndpoint *string `json:"signOutEndpoint,omitempty" tf:"sign_out_endpoint,omitempty"`

	// (Boolean) When enabled, the SAML authentication request will be signed.
	// When enabled, the SAML authentication request will be signed.
	// +kubebuilder:validation:Optional
	SignSAMLRequest *bool `json:"signSamlRequest,omitempty" tf:"sign_saml_request,omitempty"`

	// (String) Sign Request Algorithm.
	// Sign Request Algorithm.
	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// encoded.
	// X.509 signing certificate (encoded in PEM or CER) you retrieved from the IdP, Base64-encoded.
	// +kubebuilder:validation:Optional
	SigningCert *string `json:"signingCert,omitempty" tf:"signing_cert,omitempty"`

	// (Block List, Max: 1) The key used to sign requests in the connection. Uses the key and cert properties to provide the private key and certificate respectively. (see below for nested schema)
	// The key used to sign requests in the connection. Uses the `key` and `cert` properties to provide the private key and certificate respectively.
	// +kubebuilder:validation:Optional
	SigningKey []SigningKeyParameters `json:"signingKey,omitempty" tf:"signing_key,omitempty"`

	// (Number) Version 1 is deprecated, use version 2.
	// Version 1 is deprecated, use version 2.
	// +kubebuilder:validation:Optional
	StrategyVersion *float64 `json:"strategyVersion,omitempty" tf:"strategy_version,omitempty"`

	// (String) Subject line of the email.
	// Subject line of the email.
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String) Syntax of the template body.
	// Syntax of the template body.
	// +kubebuilder:validation:Optional
	Syntax *string `json:"syntax,omitempty" tf:"syntax,omitempty"`

	// (String) Apple Team ID.
	// Apple Team ID.
	// +kubebuilder:validation:Optional
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`

	// (String) Body of the template.
	// Body of the template.
	// +kubebuilder:validation:Optional
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// (String) Tenant domain name.
	// Tenant domain name.
	// +kubebuilder:validation:Optional
	TenantDomain *string `json:"tenantDomain,omitempty" tf:"tenant_domain,omitempty"`

	// (String) Token endpoint.
	// Token endpoint.
	// +kubebuilder:validation:Optional
	TokenEndpoint *string `json:"tokenEndpoint,omitempty" tf:"token_endpoint,omitempty"`

	// time passwords. (see below for nested schema)
	// Configuration options for one-time passwords.
	// +kubebuilder:validation:Optional
	Totp []TotpParameters `json:"totp,omitempty" tf:"totp,omitempty"`

	// (String) SID for your Twilio account.
	// SID for your Twilio account.
	// +kubebuilder:validation:Optional
	TwilioSid *string `json:"twilioSid,omitempty" tf:"twilio_sid,omitempty"`

	// (String, Sensitive) AuthToken for your Twilio account.
	// AuthToken for your Twilio account.
	// +kubebuilder:validation:Optional
	TwilioTokenSecretRef *v1.SecretKeySelector `json:"twilioTokenSecretRef,omitempty" tf:"-"`

	// (String) Value can be back_channel or front_channel. Front Channel will use OIDC protocol with response_mode=form_post and response_type=id_token. Back Channel will use response_type=code.
	// Value can be `back_channel` or `front_channel`. Front Channel will use OIDC protocol with `response_mode=form_post` and `response_type=id_token`. Back Channel will use `response_type=code`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
	// You can pass provider-specific parameters to an identity provider during authentication. The values can either be static per connection or dynamic per user.
	// +kubebuilder:validation:Optional
	UpstreamParams *string `json:"upstreamParams,omitempty" tf:"upstream_params,omitempty"`

	// (Boolean) Indicates whether to use cert auth or not.
	// Indicates whether to use cert auth or not.
	// +kubebuilder:validation:Optional
	UseCertAuth *bool `json:"useCertAuth,omitempty" tf:"use_cert_auth,omitempty"`

	// (Boolean) Indicates whether to use Kerberos or not.
	// Indicates whether to use Kerberos or not.
	// +kubebuilder:validation:Optional
	UseKerberos *bool `json:"useKerberos,omitempty" tf:"use_kerberos,omitempty"`

	// Fed.
	// Whether to use WS-Fed.
	// +kubebuilder:validation:Optional
	UseWsfed *bool `json:"useWsfed,omitempty" tf:"use_wsfed,omitempty"`

	// (String) Attribute in the token that will be mapped to the user_id property in Auth0.
	// Attribute in the token that will be mapped to the user_id property in Auth0.
	// +kubebuilder:validation:Optional
	UserIDAttribute *string `json:"userIdAttribute,omitempty" tf:"user_id_attribute,omitempty"`

	// (String) User info endpoint.
	// User info endpoint.
	// +kubebuilder:validation:Optional
	UserinfoEndpoint *string `json:"userinfoEndpoint,omitempty" tf:"userinfo_endpoint,omitempty"`

	// (Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)
	// Validation of the minimum and maximum values allowed for a user to have as username.
	// +kubebuilder:validation:Optional
	Validation []OptionsValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// tenant application in Azure AD.
	// Indicates whether to use the common endpoint rather than the default endpoint. Typically enabled if you're using this for a multi-tenant application in Azure AD.
	// +kubebuilder:validation:Optional
	WaadCommonEndpoint *bool `json:"waadCommonEndpoint,omitempty" tf:"waad_common_endpoint,omitempty"`

	// (String) Protocol to use.
	// Protocol to use.
	// +kubebuilder:validation:Optional
	WaadProtocol *string `json:"waadProtocol,omitempty" tf:"waad_protocol,omitempty"`
}

type OptionsValidationInitParameters struct {

	// (Block List) Connection Options for User Name Attribute (see below for nested schema)
	// Specifies the `min` and `max` values of username length.
	Username []ValidationUsernameInitParameters `json:"username,omitempty" tf:"username,omitempty"`
}

type OptionsValidationObservation struct {

	// (Block List) Connection Options for User Name Attribute (see below for nested schema)
	// Specifies the `min` and `max` values of username length.
	Username []ValidationUsernameObservation `json:"username,omitempty" tf:"username,omitempty"`
}

type OptionsValidationParameters struct {

	// (Block List) Connection Options for User Name Attribute (see below for nested schema)
	// Specifies the `min` and `max` values of username length.
	// +kubebuilder:validation:Optional
	Username []ValidationUsernameParameters `json:"username,omitempty" tf:"username,omitempty"`
}

type PasskeyInitParameters struct {

	// (Boolean) Enables passkey authentication
	// Enables passkey authentication
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasskeyObservation struct {

	// (Boolean) Enables passkey authentication
	// Enables passkey authentication
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasskeyOptionsInitParameters struct {

	// (String) Controls the UI used to challenge the user for their passkey
	// Controls the UI used to challenge the user for their passkey
	ChallengeUI *string `json:"challengeUi,omitempty" tf:"challenge_ui,omitempty"`

	// device passkey for the connection
	// Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
	LocalEnrollmentEnabled *bool `json:"localEnrollmentEnabled,omitempty" tf:"local_enrollment_enabled,omitempty"`

	// (Boolean) Enables or disables progressive enrollment of passkeys for the connection
	// Enables or disables progressive enrollment of passkeys for the connection
	ProgressiveEnrollmentEnabled *bool `json:"progressiveEnrollmentEnabled,omitempty" tf:"progressive_enrollment_enabled,omitempty"`
}

type PasskeyOptionsObservation struct {

	// (String) Controls the UI used to challenge the user for their passkey
	// Controls the UI used to challenge the user for their passkey
	ChallengeUI *string `json:"challengeUi,omitempty" tf:"challenge_ui,omitempty"`

	// device passkey for the connection
	// Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
	LocalEnrollmentEnabled *bool `json:"localEnrollmentEnabled,omitempty" tf:"local_enrollment_enabled,omitempty"`

	// (Boolean) Enables or disables progressive enrollment of passkeys for the connection
	// Enables or disables progressive enrollment of passkeys for the connection
	ProgressiveEnrollmentEnabled *bool `json:"progressiveEnrollmentEnabled,omitempty" tf:"progressive_enrollment_enabled,omitempty"`
}

type PasskeyOptionsParameters struct {

	// (String) Controls the UI used to challenge the user for their passkey
	// Controls the UI used to challenge the user for their passkey
	// +kubebuilder:validation:Optional
	ChallengeUI *string `json:"challengeUi,omitempty" tf:"challenge_ui,omitempty"`

	// device passkey for the connection
	// Enables or disables enrollment prompt for local passkey when user authenticates using a cross-device passkey for the connection
	// +kubebuilder:validation:Optional
	LocalEnrollmentEnabled *bool `json:"localEnrollmentEnabled,omitempty" tf:"local_enrollment_enabled,omitempty"`

	// (Boolean) Enables or disables progressive enrollment of passkeys for the connection
	// Enables or disables progressive enrollment of passkeys for the connection
	// +kubebuilder:validation:Optional
	ProgressiveEnrollmentEnabled *bool `json:"progressiveEnrollmentEnabled,omitempty" tf:"progressive_enrollment_enabled,omitempty"`
}

type PasskeyParameters struct {

	// (Boolean) Enables passkey authentication
	// Enables passkey authentication
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasswordComplexityOptionsInitParameters struct {

	// (Number) Defines Min Length for User Name attribute
	// Minimum number of characters allowed in passwords.
	MinLength *float64 `json:"minLength,omitempty" tf:"min_length,omitempty"`
}

type PasswordComplexityOptionsObservation struct {

	// (Number) Defines Min Length for User Name attribute
	// Minimum number of characters allowed in passwords.
	MinLength *float64 `json:"minLength,omitempty" tf:"min_length,omitempty"`
}

type PasswordComplexityOptionsParameters struct {

	// (Number) Defines Min Length for User Name attribute
	// Minimum number of characters allowed in passwords.
	// +kubebuilder:validation:Optional
	MinLength *float64 `json:"minLength,omitempty" tf:"min_length,omitempty"`
}

type PasswordDictionaryInitParameters struct {

	// sensitive.
	// Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
	// +listType=set
	Dictionary []*string `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	// Indicates whether the password dictionary check is enabled for this connection.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type PasswordDictionaryObservation struct {

	// sensitive.
	// Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
	// +listType=set
	Dictionary []*string `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	// Indicates whether the password dictionary check is enabled for this connection.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type PasswordDictionaryParameters struct {

	// sensitive.
	// Customized contents of the password dictionary. By default, the password dictionary contains a list of the [10,000 most common passwords](https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt); your customized content is used in addition to the default password dictionary. Matching is not case-sensitive.
	// +kubebuilder:validation:Optional
	// +listType=set
	Dictionary []*string `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	// Indicates whether the password dictionary check is enabled for this connection.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type PasswordHistoryInitParameters struct {

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// (Number)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type PasswordHistoryObservation struct {

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// (Number)
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type PasswordHistoryParameters struct {

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`
}

type PasswordInitParameters struct {

	// (Boolean) Enables passkey authentication
	// Enables password authentication
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasswordNoPersonalInfoInitParameters struct {

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type PasswordNoPersonalInfoObservation struct {

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type PasswordNoPersonalInfoParameters struct {

	// (Boolean) Indicates whether the password dictionary check is enabled for this connection.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`
}

type PasswordObservation struct {

	// (Boolean) Enables passkey authentication
	// Enables password authentication
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasswordParameters struct {

	// (Boolean) Enables passkey authentication
	// Enables password authentication
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PhoneNumberIdentifierInitParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether Phone Number attribute is active as an identifier
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type PhoneNumberIdentifierObservation struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether Phone Number attribute is active as an identifier
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type PhoneNumberIdentifierParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether Phone Number attribute is active as an identifier
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type PhoneNumberInitParameters struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection Options Phone Number Attribute Identifier
	Identifier []PhoneNumberIdentifierInitParameters `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for Phone Number attribute
	Signup []PhoneNumberSignupInitParameters `json:"signup,omitempty" tf:"signup,omitempty"`
}

type PhoneNumberObservation struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection Options Phone Number Attribute Identifier
	Identifier []PhoneNumberIdentifierObservation `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for Phone Number attribute
	Signup []PhoneNumberSignupObservation `json:"signup,omitempty" tf:"signup,omitempty"`
}

type PhoneNumberParameters struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection Options Phone Number Attribute Identifier
	// +kubebuilder:validation:Optional
	Identifier []PhoneNumberIdentifierParameters `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	// +kubebuilder:validation:Optional
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for Phone Number attribute
	// +kubebuilder:validation:Optional
	Signup []PhoneNumberSignupParameters `json:"signup,omitempty" tf:"signup,omitempty"`
}

type PhoneNumberSignupInitParameters struct {

	// (String) Defines signup status for Email Attribute
	// Defines status of signup for Phone Number attribute
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
	// Defines verification settings for Phone Number attribute
	Verification []SignupVerificationInitParameters `json:"verification,omitempty" tf:"verification,omitempty"`
}

type PhoneNumberSignupObservation struct {

	// (String) Defines signup status for Email Attribute
	// Defines status of signup for Phone Number attribute
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
	// Defines verification settings for Phone Number attribute
	Verification []SignupVerificationObservation `json:"verification,omitempty" tf:"verification,omitempty"`
}

type PhoneNumberSignupParameters struct {

	// (String) Defines signup status for Email Attribute
	// Defines status of signup for Phone Number attribute
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
	// Defines verification settings for Phone Number attribute
	// +kubebuilder:validation:Optional
	Verification []SignupVerificationParameters `json:"verification,omitempty" tf:"verification,omitempty"`
}

type SigningKeyInitParameters struct {

	// (String)
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type SigningKeyObservation struct {

	// (String)
	Cert *string `json:"cert,omitempty" tf:"cert,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type SigningKeyParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Cert *string `json:"cert" tf:"cert,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`
}

type SignupInitParameters struct {

	// (String) Defines signup status for Email Attribute
	// Defines signup status for Email Attribute
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
	// Defines settings for Verification under Email attribute
	Verification []VerificationInitParameters `json:"verification,omitempty" tf:"verification,omitempty"`
}

type SignupObservation struct {

	// (String) Defines signup status for Email Attribute
	// Defines signup status for Email Attribute
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
	// Defines settings for Verification under Email attribute
	Verification []VerificationObservation `json:"verification,omitempty" tf:"verification,omitempty"`
}

type SignupParameters struct {

	// (String) Defines signup status for Email Attribute
	// Defines signup status for Email Attribute
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Block List) Defines settings for Verification under Email attribute (see below for nested schema)
	// Defines settings for Verification under Email attribute
	// +kubebuilder:validation:Optional
	Verification []VerificationParameters `json:"verification,omitempty" tf:"verification,omitempty"`
}

type SignupVerificationInitParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines verification settings for Phone Number attribute
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type SignupVerificationObservation struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines verification settings for Phone Number attribute
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type SignupVerificationParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines verification settings for Phone Number attribute
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type TotpInitParameters struct {

	// time password.
	// Length of the one-time password.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// (Number) Seconds between allowed generation of new passwords.
	// Seconds between allowed generation of new passwords.
	TimeStep *float64 `json:"timeStep,omitempty" tf:"time_step,omitempty"`
}

type TotpObservation struct {

	// time password.
	// Length of the one-time password.
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// (Number) Seconds between allowed generation of new passwords.
	// Seconds between allowed generation of new passwords.
	TimeStep *float64 `json:"timeStep,omitempty" tf:"time_step,omitempty"`
}

type TotpParameters struct {

	// time password.
	// Length of the one-time password.
	// +kubebuilder:validation:Optional
	Length *float64 `json:"length,omitempty" tf:"length,omitempty"`

	// (Number) Seconds between allowed generation of new passwords.
	// Seconds between allowed generation of new passwords.
	// +kubebuilder:validation:Optional
	TimeStep *float64 `json:"timeStep,omitempty" tf:"time_step,omitempty"`
}

type UsernameIdentifierInitParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether UserName attribute is active as an identifier
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type UsernameIdentifierObservation struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether UserName attribute is active as an identifier
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type UsernameIdentifierParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines whether UserName attribute is active as an identifier
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type UsernameInitParameters struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection options for User Name Attribute Identifier
	Identifier []UsernameIdentifierInitParameters `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for User Name attribute
	Signup []UsernameSignupInitParameters `json:"signup,omitempty" tf:"signup,omitempty"`

	// (Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)
	// Defines validation settings for User Name attribute
	Validation []ValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type UsernameObservation struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection options for User Name Attribute Identifier
	Identifier []UsernameIdentifierObservation `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for User Name attribute
	Signup []UsernameSignupObservation `json:"signup,omitempty" tf:"signup,omitempty"`

	// (Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)
	// Defines validation settings for User Name attribute
	Validation []ValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type UsernameParameters struct {

	// (Block List) Connection Options Email Attribute Identifier (see below for nested schema)
	// Connection options for User Name Attribute Identifier
	// +kubebuilder:validation:Optional
	Identifier []UsernameIdentifierParameters `json:"identifier,omitempty" tf:"identifier,omitempty"`

	// (Boolean) Defines whether Profile is required
	// Defines whether Profile is required
	// +kubebuilder:validation:Optional
	ProfileRequired *bool `json:"profileRequired,omitempty" tf:"profile_required,omitempty"`

	// (Block List) Defines signup settings for Email attribute (see below for nested schema)
	// Defines signup settings for User Name attribute
	// +kubebuilder:validation:Optional
	Signup []UsernameSignupParameters `json:"signup,omitempty" tf:"signup,omitempty"`

	// (Block List, Max: 1) Validation of the minimum and maximum values allowed for a user to have as username. (see below for nested schema)
	// Defines validation settings for User Name attribute
	// +kubebuilder:validation:Optional
	Validation []ValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type UsernameSignupInitParameters struct {

	// (String) Defines signup status for Email Attribute
	// Defines whether User Name attribute is active as an identifier
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type UsernameSignupObservation struct {

	// (String) Defines signup status for Email Attribute
	// Defines whether User Name attribute is active as an identifier
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type UsernameSignupParameters struct {

	// (String) Defines signup status for Email Attribute
	// Defines whether User Name attribute is active as an identifier
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ValidationInitParameters struct {

	// (Block List) Defines allowed types for for UserName attribute (see below for nested schema)
	// Defines allowed types for for UserName attribute
	AllowedTypes []AllowedTypesInitParameters `json:"allowedTypes,omitempty" tf:"allowed_types,omitempty"`

	// (Number) Defines Max Length for User Name attribute
	// Defines Max Length for User Name attribute
	MaxLength *float64 `json:"maxLength,omitempty" tf:"max_length,omitempty"`

	// (Number) Defines Min Length for User Name attribute
	// Defines Min Length for User Name attribute
	MinLength *float64 `json:"minLength,omitempty" tf:"min_length,omitempty"`
}

type ValidationObservation struct {

	// (Block List) Defines allowed types for for UserName attribute (see below for nested schema)
	// Defines allowed types for for UserName attribute
	AllowedTypes []AllowedTypesObservation `json:"allowedTypes,omitempty" tf:"allowed_types,omitempty"`

	// (Number) Defines Max Length for User Name attribute
	// Defines Max Length for User Name attribute
	MaxLength *float64 `json:"maxLength,omitempty" tf:"max_length,omitempty"`

	// (Number) Defines Min Length for User Name attribute
	// Defines Min Length for User Name attribute
	MinLength *float64 `json:"minLength,omitempty" tf:"min_length,omitempty"`
}

type ValidationParameters struct {

	// (Block List) Defines allowed types for for UserName attribute (see below for nested schema)
	// Defines allowed types for for UserName attribute
	// +kubebuilder:validation:Optional
	AllowedTypes []AllowedTypesParameters `json:"allowedTypes,omitempty" tf:"allowed_types,omitempty"`

	// (Number) Defines Max Length for User Name attribute
	// Defines Max Length for User Name attribute
	// +kubebuilder:validation:Optional
	MaxLength *float64 `json:"maxLength,omitempty" tf:"max_length,omitempty"`

	// (Number) Defines Min Length for User Name attribute
	// Defines Min Length for User Name attribute
	// +kubebuilder:validation:Optional
	MinLength *float64 `json:"minLength,omitempty" tf:"min_length,omitempty"`
}

type ValidationUsernameInitParameters struct {

	// (Number)
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// (Number)
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type ValidationUsernameObservation struct {

	// (Number)
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// (Number)
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type ValidationUsernameParameters struct {

	// (Number)
	// +kubebuilder:validation:Optional
	Max *float64 `json:"max,omitempty" tf:"max,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Min *float64 `json:"min,omitempty" tf:"min,omitempty"`
}

type VerificationInitParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines verification settings for signup attribute
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type VerificationObservation struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines verification settings for signup attribute
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

type VerificationParameters struct {

	// (Boolean) Defines whether email attribute is active as an identifier
	// Defines verification settings for signup attribute
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`
}

// ConnectionSpec defines the desired state of Connection
type ConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectionInitParameters `json:"initProvider,omitempty"`
}

// ConnectionStatus defines the observed state of Connection.
type ConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Connection is the Schema for the Connections API. With Auth0, you can define sources of users, otherwise known as connections, which may include identity providers (such as Google or LinkedIn), databases, or passwordless authentication methods. This resource allows you to configure and manage connections to be used with your clients and users.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Connection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.strategy) || (has(self.initProvider) && has(self.initProvider.strategy))",message="spec.forProvider.strategy is a required parameter"
	Spec   ConnectionSpec   `json:"spec"`
	Status ConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionList contains a list of Connections
type ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Connection `json:"items"`
}

// Repository type metadata.
var (
	Connection_Kind             = "Connection"
	Connection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Connection_Kind}.String()
	Connection_KindAPIVersion   = Connection_Kind + "." + CRDGroupVersion.String()
	Connection_GroupVersionKind = CRDGroupVersion.WithKind(Connection_Kind)
)

func init() {
	SchemeBuilder.Register(&Connection{}, &ConnectionList{})
}
