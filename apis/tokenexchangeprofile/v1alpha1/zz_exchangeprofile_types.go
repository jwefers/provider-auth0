// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExchangeProfileInitParameters struct {

	// (String) Unique identifier of the Action
	// Unique identifier of the Action
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	// (String) Name of the token exchange profile.
	// Name of the token exchange profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the subject token
	// Type of the subject token
	SubjectTokenType *string `json:"subjectTokenType,omitempty" tf:"subject_token_type,omitempty"`

	// (String) Type of the token exchange profile
	// Type of the token exchange profile
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ExchangeProfileObservation struct {

	// (String) Unique identifier of the Action
	// Unique identifier of the Action
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	// (String) The ISO 8601 formatted date the credential was created.
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the token exchange profile.
	// Name of the token exchange profile.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the subject token
	// Type of the subject token
	SubjectTokenType *string `json:"subjectTokenType,omitempty" tf:"subject_token_type,omitempty"`

	// (String) Type of the token exchange profile
	// Type of the token exchange profile
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The ISO 8601 formatted date the credential was updated.
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ExchangeProfileParameters struct {

	// (String) Unique identifier of the Action
	// Unique identifier of the Action
	// +kubebuilder:validation:Optional
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	// (String) Name of the token exchange profile.
	// Name of the token exchange profile.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Type of the subject token
	// Type of the subject token
	// +kubebuilder:validation:Optional
	SubjectTokenType *string `json:"subjectTokenType,omitempty" tf:"subject_token_type,omitempty"`

	// (String) Type of the token exchange profile
	// Type of the token exchange profile
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ExchangeProfileSpec defines the desired state of ExchangeProfile
type ExchangeProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExchangeProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExchangeProfileInitParameters `json:"initProvider,omitempty"`
}

// ExchangeProfileStatus defines the observed state of ExchangeProfile.
type ExchangeProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExchangeProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ExchangeProfile is the Schema for the ExchangeProfiles API. With this resource, you can manage Auth0 Custom Token Exchange Profiles
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type ExchangeProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ExchangeProfileSpec   `json:"spec"`
	Status ExchangeProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExchangeProfileList contains a list of ExchangeProfiles
type ExchangeProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExchangeProfile `json:"items"`
}

// Repository type metadata.
var (
	ExchangeProfile_Kind             = "ExchangeProfile"
	ExchangeProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExchangeProfile_Kind}.String()
	ExchangeProfile_KindAPIVersion   = ExchangeProfile_Kind + "." + CRDGroupVersion.String()
	ExchangeProfile_GroupVersionKind = CRDGroupVersion.WithKind(ExchangeProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&ExchangeProfile{}, &ExchangeProfileList{})
}
