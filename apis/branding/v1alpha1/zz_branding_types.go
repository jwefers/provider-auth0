// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BrandingInitParameters struct {

	// (Block List, Max: 1) Configuration settings for colors for branding. (see below for nested schema)
	// Configuration settings for colors for branding.
	Colors []ColorsInitParameters `json:"colors,omitempty" tf:"colors,omitempty"`

	// (String) URL for the favicon.
	// URL for the favicon.
	FaviconURL *string `json:"faviconUrl,omitempty" tf:"favicon_url,omitempty"`

	// (Block List, Max: 1) Configuration settings to customize the font. (see below for nested schema)
	// Configuration settings to customize the font.
	Font []FontInitParameters `json:"font,omitempty" tf:"font,omitempty"`

	// (String) URL of logo for branding.
	// URL of logo for branding.
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`

	// (Block List, Max: 1) Configuration settings for Universal Login. (see below for nested schema)
	// Configuration settings for Universal Login.
	UniversalLogin []UniversalLoginInitParameters `json:"universalLogin,omitempty" tf:"universal_login,omitempty"`
}

type BrandingObservation struct {

	// (Block List, Max: 1) Configuration settings for colors for branding. (see below for nested schema)
	// Configuration settings for colors for branding.
	Colors []ColorsObservation `json:"colors,omitempty" tf:"colors,omitempty"`

	// (String) URL for the favicon.
	// URL for the favicon.
	FaviconURL *string `json:"faviconUrl,omitempty" tf:"favicon_url,omitempty"`

	// (Block List, Max: 1) Configuration settings to customize the font. (see below for nested schema)
	// Configuration settings to customize the font.
	Font []FontObservation `json:"font,omitempty" tf:"font,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) URL of logo for branding.
	// URL of logo for branding.
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`

	// (Block List, Max: 1) Configuration settings for Universal Login. (see below for nested schema)
	// Configuration settings for Universal Login.
	UniversalLogin []UniversalLoginObservation `json:"universalLogin,omitempty" tf:"universal_login,omitempty"`
}

type BrandingParameters struct {

	// (Block List, Max: 1) Configuration settings for colors for branding. (see below for nested schema)
	// Configuration settings for colors for branding.
	// +kubebuilder:validation:Optional
	Colors []ColorsParameters `json:"colors,omitempty" tf:"colors,omitempty"`

	// (String) URL for the favicon.
	// URL for the favicon.
	// +kubebuilder:validation:Optional
	FaviconURL *string `json:"faviconUrl,omitempty" tf:"favicon_url,omitempty"`

	// (Block List, Max: 1) Configuration settings to customize the font. (see below for nested schema)
	// Configuration settings to customize the font.
	// +kubebuilder:validation:Optional
	Font []FontParameters `json:"font,omitempty" tf:"font,omitempty"`

	// (String) URL of logo for branding.
	// URL of logo for branding.
	// +kubebuilder:validation:Optional
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`

	// (Block List, Max: 1) Configuration settings for Universal Login. (see below for nested schema)
	// Configuration settings for Universal Login.
	// +kubebuilder:validation:Optional
	UniversalLogin []UniversalLoginParameters `json:"universalLogin,omitempty" tf:"universal_login,omitempty"`
}

type ColorsInitParameters struct {

	// (String) Background color of login pages in hexadecimal.
	// Background color of login pages in hexadecimal.
	PageBackground *string `json:"pageBackground,omitempty" tf:"page_background,omitempty"`

	// (String) Primary button background color in hexadecimal.
	// Primary button background color in hexadecimal.
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`
}

type ColorsObservation struct {

	// (String) Background color of login pages in hexadecimal.
	// Background color of login pages in hexadecimal.
	PageBackground *string `json:"pageBackground,omitempty" tf:"page_background,omitempty"`

	// (String) Primary button background color in hexadecimal.
	// Primary button background color in hexadecimal.
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`
}

type ColorsParameters struct {

	// (String) Background color of login pages in hexadecimal.
	// Background color of login pages in hexadecimal.
	// +kubebuilder:validation:Optional
	PageBackground *string `json:"pageBackground,omitempty" tf:"page_background,omitempty"`

	// (String) Primary button background color in hexadecimal.
	// Primary button background color in hexadecimal.
	// +kubebuilder:validation:Optional
	Primary *string `json:"primary,omitempty" tf:"primary,omitempty"`
}

type FontInitParameters struct {

	// (String) URL for the custom font.
	// URL for the custom font.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type FontObservation struct {

	// (String) URL for the custom font.
	// URL for the custom font.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type FontParameters struct {

	// (String) URL for the custom font.
	// URL for the custom font.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type UniversalLoginInitParameters struct {

	// (String) The html template for the New Universal Login Experience.
	// The html template for the New Universal Login Experience.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`
}

type UniversalLoginObservation struct {

	// (String) The html template for the New Universal Login Experience.
	// The html template for the New Universal Login Experience.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`
}

type UniversalLoginParameters struct {

	// (String) The html template for the New Universal Login Experience.
	// The html template for the New Universal Login Experience.
	// +kubebuilder:validation:Optional
	Body *string `json:"body" tf:"body,omitempty"`
}

// BrandingSpec defines the desired state of Branding
type BrandingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BrandingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BrandingInitParameters `json:"initProvider,omitempty"`
}

// BrandingStatus defines the observed state of Branding.
type BrandingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BrandingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Branding is the Schema for the Brandings API. This resource allows you to manage branding within your Auth0 tenant. Auth0 can be customized with a look and feel that aligns with your organization's brand requirements and user expectations.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Branding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BrandingSpec   `json:"spec"`
	Status            BrandingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BrandingList contains a list of Brandings
type BrandingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Branding `json:"items"`
}

// Repository type metadata.
var (
	Branding_Kind             = "Branding"
	Branding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Branding_Kind}.String()
	Branding_KindAPIVersion   = Branding_Kind + "." + CRDGroupVersion.String()
	Branding_GroupVersionKind = CRDGroupVersion.WithKind(Branding_Kind)
)

func init() {
	SchemeBuilder.Register(&Branding{}, &BrandingList{})
}
