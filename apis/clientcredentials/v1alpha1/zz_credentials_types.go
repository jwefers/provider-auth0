// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CredentialsInitParameters struct {

	// based mTLS authentication), self_signed_tls_client_auth (confidential client using mTLS authentication utilizing a self-signed certificate).
	// Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `client_secret_post` (confidential client using HTTP POST parameters), `client_secret_basic` (confidential client using HTTP Basic), `private_key_jwt` (confidential client using a Private Key JWT), `tls_client_auth` (confidential client using CA-based mTLS authentication), `self_signed_tls_client_auth` (confidential client using mTLS authentication utilizing a self-signed certificate).
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// (String) The ID of the client for which to configure the authentication method.
	// The ID of the client for which to configure the authentication method.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) Secret for the client when using client_secret_post or client_secret_basic authentication method. Keep this private. Otherwise, the attribute will contain an empty string. The attribute will also be an empty string in case private_key_jwt is selected as an authentication method.
	// Secret for the client when using `client_secret_post` or `client_secret_basic` authentication method. Keep this private. Otherwise, the attribute will contain an empty string. The attribute will also be an empty string in case `private_key_jwt` is selected as an authentication method.
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (Block List, Max: 1) Defines private_key_jwt client authentication method. (see below for nested schema)
	// Defines `private_key_jwt` client authentication method.
	PrivateKeyJwt []PrivateKeyJwtInitParameters `json:"privateKeyJwt,omitempty" tf:"private_key_jwt,omitempty"`

	// (Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)
	// Defines `tls_client_auth` client authentication method.
	SelfSignedTLSClientAuth []SelfSignedTLSClientAuthInitParameters `json:"selfSignedTlsClientAuth,omitempty" tf:"self_signed_tls_client_auth,omitempty"`

	// secured Authorization Requests(JAR). (see below for nested schema)
	// Configuration for JWT-secured Authorization Requests(JAR).
	SignedRequestObject []SignedRequestObjectInitParameters `json:"signedRequestObject,omitempty" tf:"signed_request_object,omitempty"`

	// (Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)
	// Defines `tls_client_auth` client authentication method.
	TLSClientAuth []TLSClientAuthInitParameters `json:"tlsClientAuth,omitempty" tf:"tls_client_auth,omitempty"`
}

type CredentialsObservation struct {

	// based mTLS authentication), self_signed_tls_client_auth (confidential client using mTLS authentication utilizing a self-signed certificate).
	// Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `client_secret_post` (confidential client using HTTP POST parameters), `client_secret_basic` (confidential client using HTTP Basic), `private_key_jwt` (confidential client using a Private Key JWT), `tls_client_auth` (confidential client using CA-based mTLS authentication), `self_signed_tls_client_auth` (confidential client using mTLS authentication utilizing a self-signed certificate).
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// (String) The ID of the client for which to configure the authentication method.
	// The ID of the client for which to configure the authentication method.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Defines private_key_jwt client authentication method. (see below for nested schema)
	// Defines `private_key_jwt` client authentication method.
	PrivateKeyJwt []PrivateKeyJwtObservation `json:"privateKeyJwt,omitempty" tf:"private_key_jwt,omitempty"`

	// (Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)
	// Defines `tls_client_auth` client authentication method.
	SelfSignedTLSClientAuth []SelfSignedTLSClientAuthObservation `json:"selfSignedTlsClientAuth,omitempty" tf:"self_signed_tls_client_auth,omitempty"`

	// secured Authorization Requests(JAR). (see below for nested schema)
	// Configuration for JWT-secured Authorization Requests(JAR).
	SignedRequestObject []SignedRequestObjectObservation `json:"signedRequestObject,omitempty" tf:"signed_request_object,omitempty"`

	// (Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)
	// Defines `tls_client_auth` client authentication method.
	TLSClientAuth []TLSClientAuthObservation `json:"tlsClientAuth,omitempty" tf:"tls_client_auth,omitempty"`
}

type CredentialsParameters struct {

	// based mTLS authentication), self_signed_tls_client_auth (confidential client using mTLS authentication utilizing a self-signed certificate).
	// Configure the method to use when making requests to any endpoint that requires this client to authenticate. Options include `none` (public client without a client secret), `client_secret_post` (confidential client using HTTP POST parameters), `client_secret_basic` (confidential client using HTTP Basic), `private_key_jwt` (confidential client using a Private Key JWT), `tls_client_auth` (confidential client using CA-based mTLS authentication), `self_signed_tls_client_auth` (confidential client using mTLS authentication utilizing a self-signed certificate).
	// +kubebuilder:validation:Optional
	AuthenticationMethod *string `json:"authenticationMethod,omitempty" tf:"authentication_method,omitempty"`

	// (String) The ID of the client for which to configure the authentication method.
	// The ID of the client for which to configure the authentication method.
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// (String, Sensitive) Secret for the client when using client_secret_post or client_secret_basic authentication method. Keep this private. Otherwise, the attribute will contain an empty string. The attribute will also be an empty string in case private_key_jwt is selected as an authentication method.
	// Secret for the client when using `client_secret_post` or `client_secret_basic` authentication method. Keep this private. Otherwise, the attribute will contain an empty string. The attribute will also be an empty string in case `private_key_jwt` is selected as an authentication method.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// (Block List, Max: 1) Defines private_key_jwt client authentication method. (see below for nested schema)
	// Defines `private_key_jwt` client authentication method.
	// +kubebuilder:validation:Optional
	PrivateKeyJwt []PrivateKeyJwtParameters `json:"privateKeyJwt,omitempty" tf:"private_key_jwt,omitempty"`

	// (Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)
	// Defines `tls_client_auth` client authentication method.
	// +kubebuilder:validation:Optional
	SelfSignedTLSClientAuth []SelfSignedTLSClientAuthParameters `json:"selfSignedTlsClientAuth,omitempty" tf:"self_signed_tls_client_auth,omitempty"`

	// secured Authorization Requests(JAR). (see below for nested schema)
	// Configuration for JWT-secured Authorization Requests(JAR).
	// +kubebuilder:validation:Optional
	SignedRequestObject []SignedRequestObjectParameters `json:"signedRequestObject,omitempty" tf:"signed_request_object,omitempty"`

	// (Block List, Max: 1) Defines tls_client_auth client authentication method. (see below for nested schema)
	// Defines `tls_client_auth` client authentication method.
	// +kubebuilder:validation:Optional
	TLSClientAuth []TLSClientAuthParameters `json:"tlsClientAuth,omitempty" tf:"tls_client_auth,omitempty"`
}

type PrivateKeyJwtCredentialsInitParameters struct {

	// (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
	// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `public_key`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
	ParseExpiryFromCert *bool `json:"parseExpiryFromCert,omitempty" tf:"parse_expiry_from_cert,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`
}

type PrivateKeyJwtCredentialsObservation struct {

	// (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
	// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (String) The ISO 8601 formatted date the credential was created.
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `public_key`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) The ID of this resource.
	// The ID of the client credential.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The key identifier of the credential, generated on creation.
	// The key identifier of the credential, generated on creation.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
	ParseExpiryFromCert *bool `json:"parseExpiryFromCert,omitempty" tf:"parse_expiry_from_cert,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`

	// (String) The ISO 8601 formatted date the credential was updated.
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type PrivateKeyJwtCredentialsParameters struct {

	// (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
	// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `public_key`.
	// +kubebuilder:validation:Optional
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
	// +kubebuilder:validation:Optional
	ParseExpiryFromCert *bool `json:"parseExpiryFromCert,omitempty" tf:"parse_expiry_from_cert,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// +kubebuilder:validation:Optional
	Pem *string `json:"pem" tf:"pem,omitempty"`
}

type PrivateKeyJwtInitParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set.
	Credentials []PrivateKeyJwtCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`
}

type PrivateKeyJwtObservation struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set.
	Credentials []PrivateKeyJwtCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`
}

type PrivateKeyJwtParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set.
	// +kubebuilder:validation:Optional
	Credentials []PrivateKeyJwtCredentialsParameters `json:"credentials" tf:"credentials,omitempty"`
}

type SelfSignedTLSClientAuthCredentialsInitParameters struct {

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `x509_cert`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted X509 certificate. Must be JSON escaped.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`
}

type SelfSignedTLSClientAuthCredentialsObservation struct {

	// (String) The ISO 8601 formatted date the credential was created.
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `x509_cert`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) The ID of this resource.
	// The ID of the client credential.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted X509 certificate. Must be JSON escaped.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`

	// (String) The X509 certificate's SHA256 thumbprint.
	// The X509 certificate's SHA256 thumbprint.
	ThumbprintSha256 *string `json:"thumbprintSha256,omitempty" tf:"thumbprint_sha256,omitempty"`

	// (String) The ISO 8601 formatted date the credential was updated.
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SelfSignedTLSClientAuthCredentialsParameters struct {

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `x509_cert`.
	// +kubebuilder:validation:Optional
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted X509 certificate. Must be JSON escaped.
	// +kubebuilder:validation:Optional
	Pem *string `json:"pem" tf:"pem,omitempty"`
}

type SelfSignedTLSClientAuthInitParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Credentials that will be enabled on the client for mTLS authentication utilizing self-signed certificates.
	Credentials []SelfSignedTLSClientAuthCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`
}

type SelfSignedTLSClientAuthObservation struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Credentials that will be enabled on the client for mTLS authentication utilizing self-signed certificates.
	Credentials []SelfSignedTLSClientAuthCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`
}

type SelfSignedTLSClientAuthParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Credentials that will be enabled on the client for mTLS authentication utilizing self-signed certificates.
	// +kubebuilder:validation:Optional
	Credentials []SelfSignedTLSClientAuthCredentialsParameters `json:"credentials" tf:"credentials,omitempty"`
}

type SignedRequestObjectCredentialsInitParameters struct {

	// (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
	// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `public_key`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
	ParseExpiryFromCert *bool `json:"parseExpiryFromCert,omitempty" tf:"parse_expiry_from_cert,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`
}

type SignedRequestObjectCredentialsObservation struct {

	// (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
	// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (String) The ISO 8601 formatted date the credential was created.
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `public_key`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) The ID of this resource.
	// The ID of the client credential.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The key identifier of the credential, generated on creation.
	// The key identifier of the credential, generated on creation.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
	ParseExpiryFromCert *bool `json:"parseExpiryFromCert,omitempty" tf:"parse_expiry_from_cert,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`

	// (String) The ISO 8601 formatted date the credential was updated.
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SignedRequestObjectCredentialsParameters struct {

	// (String) Algorithm which will be used with the credential. Can be one of RS256, RS384, PS256. If not specified, RS256 will be used.
	// Algorithm which will be used with the credential. Can be one of `RS256`, `RS384`, `PS256`. If not specified, `RS256` will be used.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `public_key`.
	// +kubebuilder:validation:Optional
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// (String) The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// The ISO 8601 formatted date representing the expiration of the credential. It is not possible to set this to never expire after it has been set. Recreate the certificate if needed.
	// +kubebuilder:validation:Optional
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the expires_at is set the credential expiry will be set to the explicit expires_at value.
	// Parse expiry from x509 certificate. If true, attempts to parse the expiry date from the provided PEM. If also the `expires_at` is set the credential expiry will be set to the explicit `expires_at` value.
	// +kubebuilder:validation:Optional
	ParseExpiryFromCert *bool `json:"parseExpiryFromCert,omitempty" tf:"parse_expiry_from_cert,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// +kubebuilder:validation:Optional
	Pem *string `json:"pem" tf:"pem,omitempty"`
}

type SignedRequestObjectInitParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Client credentials for use with JWT-secured authorization requests.
	Credentials []SignedRequestObjectCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// secured authorization requests.
	// Require JWT-secured authorization requests.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`
}

type SignedRequestObjectObservation struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Client credentials for use with JWT-secured authorization requests.
	Credentials []SignedRequestObjectCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// secured authorization requests.
	// Require JWT-secured authorization requests.
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`
}

type SignedRequestObjectParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Client credentials for use with JWT-secured authorization requests.
	// +kubebuilder:validation:Optional
	Credentials []SignedRequestObjectCredentialsParameters `json:"credentials" tf:"credentials,omitempty"`

	// secured authorization requests.
	// Require JWT-secured authorization requests.
	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`
}

type TLSClientAuthCredentialsInitParameters struct {

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `cert_subject_dn`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted X509 certificate. Must be JSON escaped. Mutually exlusive with `subject_dn` property.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`

	// (String) Subject Distinguished Name. Mutually exlusive with pem property.
	// Subject Distinguished Name. Mutually exlusive with `pem` property.
	SubjectDn *string `json:"subjectDn,omitempty" tf:"subject_dn,omitempty"`
}

type TLSClientAuthCredentialsObservation struct {

	// (String) The ISO 8601 formatted date the credential was created.
	// The ISO 8601 formatted date the credential was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `cert_subject_dn`.
	CredentialType *string `json:"credentialType,omitempty" tf:"credential_type,omitempty"`

	// (String) The ID of this resource.
	// The ID of the client credential.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted X509 certificate. Must be JSON escaped. Mutually exlusive with `subject_dn` property.
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`

	// (String) Subject Distinguished Name. Mutually exlusive with pem property.
	// Subject Distinguished Name. Mutually exlusive with `pem` property.
	SubjectDn *string `json:"subjectDn,omitempty" tf:"subject_dn,omitempty"`

	// (String) The ISO 8601 formatted date the credential was updated.
	// The ISO 8601 formatted date the credential was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type TLSClientAuthCredentialsParameters struct {

	// (String) Credential type. Supported types: public_key.
	// Credential type. Supported types: `cert_subject_dn`.
	// +kubebuilder:validation:Optional
	CredentialType *string `json:"credentialType" tf:"credential_type,omitempty"`

	// (String) Friendly name for a credential.
	// Friendly name for a credential.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted public key (SPKI and PKCS1) or X509 certificate. Must be JSON escaped.
	// PEM-formatted X509 certificate. Must be JSON escaped. Mutually exlusive with `subject_dn` property.
	// +kubebuilder:validation:Optional
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`

	// (String) Subject Distinguished Name. Mutually exlusive with pem property.
	// Subject Distinguished Name. Mutually exlusive with `pem` property.
	// +kubebuilder:validation:Optional
	SubjectDn *string `json:"subjectDn,omitempty" tf:"subject_dn,omitempty"`
}

type TLSClientAuthInitParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Credentials that will be enabled on the client for CA-based mTLS authentication.
	Credentials []TLSClientAuthCredentialsInitParameters `json:"credentials,omitempty" tf:"credentials,omitempty"`
}

type TLSClientAuthObservation struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Credentials that will be enabled on the client for CA-based mTLS authentication.
	Credentials []TLSClientAuthCredentialsObservation `json:"credentials,omitempty" tf:"credentials,omitempty"`
}

type TLSClientAuthParameters struct {

	// (Block List, Min: 1, Max: 2) Client credentials available for use when Private Key JWT is in use as the client authentication method. A maximum of 2 client credentials can be set. (see below for nested schema)
	// Credentials that will be enabled on the client for CA-based mTLS authentication.
	// +kubebuilder:validation:Optional
	Credentials []TLSClientAuthCredentialsParameters `json:"credentials" tf:"credentials,omitempty"`
}

// CredentialsSpec defines the desired state of Credentials
type CredentialsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CredentialsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CredentialsInitParameters `json:"initProvider,omitempty"`
}

// CredentialsStatus defines the observed state of Credentials.
type CredentialsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CredentialsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Credentials is the Schema for the Credentialss API. With this resource, you can configure the method to use when making requests to any endpoint that requires this client to authenticate.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Credentials struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientId) || (has(self.initProvider) && has(self.initProvider.clientId))",message="spec.forProvider.clientId is a required parameter"
	Spec   CredentialsSpec   `json:"spec"`
	Status CredentialsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialsList contains a list of Credentialss
type CredentialsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Credentials `json:"items"`
}

// Repository type metadata.
var (
	Credentials_Kind             = "Credentials"
	Credentials_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Credentials_Kind}.String()
	Credentials_KindAPIVersion   = Credentials_Kind + "." + CRDGroupVersion.String()
	Credentials_GroupVersionKind = CRDGroupVersion.WithKind(Credentials_Kind)
)

func init() {
	SchemeBuilder.Register(&Credentials{}, &CredentialsList{})
}
