// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomerProvidedRootKeyInitParameters struct {

	// encoded customer provided root key, wrapped using the public_wrapping_key. This can be removed after the wrapped key has been applied.
	// The base64-encoded customer provided root key, wrapped using the `public_wrapping_key`. This can be removed after the wrapped key has been applied.
	WrappedKey *string `json:"wrappedKey,omitempty" tf:"wrapped_key,omitempty"`
}

type CustomerProvidedRootKeyObservation struct {

	// (String) The ISO 8601 formatted date the customer provided root key was created.
	// The ISO 8601 formatted date the customer provided root key was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The key ID of the customer provided root key.
	// The key ID of the customer provided root key.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (String) The key ID of the parent wrapping key.
	// The key ID of the parent wrapping key.
	ParentKeyID *string `json:"parentKeyId,omitempty" tf:"parent_key_id,omitempty"`

	// (String) The public wrapping key in PEM format.
	// The public wrapping key in PEM format.
	PublicWrappingKey *string `json:"publicWrappingKey,omitempty" tf:"public_wrapping_key,omitempty"`

	// activation, active, deactivated, or destroyed.
	// The state of the encryption key. One of `pre-activation`, `active`, `deactivated`, or `destroyed`.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// provided-root-key.
	// The type of the customer provided root key. Should be `customer-provided-root-key`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The ISO 8601 formatted date the customer provided root key was updated.
	// The ISO 8601 formatted date the customer provided root key was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// encoded customer provided root key, wrapped using the public_wrapping_key. This can be removed after the wrapped key has been applied.
	// The base64-encoded customer provided root key, wrapped using the `public_wrapping_key`. This can be removed after the wrapped key has been applied.
	WrappedKey *string `json:"wrappedKey,omitempty" tf:"wrapped_key,omitempty"`

	// (String) The algorithm that should be used to wrap the customer provided root key. Should be CKM_RSA_AES_KEY_WRAP.
	// The algorithm that should be used to wrap the customer provided root key. Should be `CKM_RSA_AES_KEY_WRAP`.
	WrappingAlgorithm *string `json:"wrappingAlgorithm,omitempty" tf:"wrapping_algorithm,omitempty"`
}

type CustomerProvidedRootKeyParameters struct {

	// encoded customer provided root key, wrapped using the public_wrapping_key. This can be removed after the wrapped key has been applied.
	// The base64-encoded customer provided root key, wrapped using the `public_wrapping_key`. This can be removed after the wrapped key has been applied.
	// +kubebuilder:validation:Optional
	WrappedKey *string `json:"wrappedKey,omitempty" tf:"wrapped_key,omitempty"`
}

type EncryptionKeysInitParameters struct {
}

type EncryptionKeysObservation struct {

	// (String) The ISO 8601 formatted date the customer provided root key was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The key ID of the customer provided root key.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// (String) The key ID of the parent wrapping key.
	ParentKeyID *string `json:"parentKeyId,omitempty" tf:"parent_key_id,omitempty"`

	// activation, active, deactivated, or destroyed.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// provided-root-key.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The ISO 8601 formatted date the customer provided root key was updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type EncryptionKeysParameters struct {
}

type KeyManagerInitParameters struct {

	// encoded and added as the wrapped_key attribute. (see below for nested schema)
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
	CustomerProvidedRootKey []CustomerProvidedRootKeyInitParameters `json:"customerProvidedRootKey,omitempty" tf:"customer_provided_root_key,omitempty"`

	// (String) If this value is changed, the encryption keys will be rotated. A UUID is recommended for the key_rotation_id.
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
	KeyRotationID *string `json:"keyRotationId,omitempty" tf:"key_rotation_id,omitempty"`
}

type KeyManagerObservation struct {

	// encoded and added as the wrapped_key attribute. (see below for nested schema)
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
	CustomerProvidedRootKey []CustomerProvidedRootKeyObservation `json:"customerProvidedRootKey,omitempty" tf:"customer_provided_root_key,omitempty"`

	// (List of Object) All encryption keys. (see below for nested schema)
	// All encryption keys.
	EncryptionKeys []EncryptionKeysObservation `json:"encryptionKeys,omitempty" tf:"encryption_keys,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) If this value is changed, the encryption keys will be rotated. A UUID is recommended for the key_rotation_id.
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
	KeyRotationID *string `json:"keyRotationId,omitempty" tf:"key_rotation_id,omitempty"`
}

type KeyManagerParameters struct {

	// encoded and added as the wrapped_key attribute. (see below for nested schema)
	// This attribute is used for provisioning the customer provided root key. To initiate the provisioning process, create a new empty `customer_provided_root_key` block. After applying this, the `public_wrapping_key` can be retreived from the resource, and the new root key should be generated by the customer and wrapped with the wrapping key, then base64-encoded and added as the `wrapped_key` attribute.
	// +kubebuilder:validation:Optional
	CustomerProvidedRootKey []CustomerProvidedRootKeyParameters `json:"customerProvidedRootKey,omitempty" tf:"customer_provided_root_key,omitempty"`

	// (String) If this value is changed, the encryption keys will be rotated. A UUID is recommended for the key_rotation_id.
	// If this value is changed, the encryption keys will be rotated. A UUID is recommended for the `key_rotation_id`.
	// +kubebuilder:validation:Optional
	KeyRotationID *string `json:"keyRotationId,omitempty" tf:"key_rotation_id,omitempty"`
}

// KeyManagerSpec defines the desired state of KeyManager
type KeyManagerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyManagerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KeyManagerInitParameters `json:"initProvider,omitempty"`
}

// KeyManagerStatus defines the observed state of KeyManager.
type KeyManagerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyManagerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KeyManager is the Schema for the KeyManagers API. Resource to allow the rekeying of your tenant master key.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type KeyManager struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyManagerSpec   `json:"spec"`
	Status            KeyManagerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyManagerList contains a list of KeyManagers
type KeyManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyManager `json:"items"`
}

// Repository type metadata.
var (
	KeyManager_Kind             = "KeyManager"
	KeyManager_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyManager_Kind}.String()
	KeyManager_KindAPIVersion   = KeyManager_Kind + "." + CRDGroupVersion.String()
	KeyManager_GroupVersionKind = CRDGroupVersion.WithKind(KeyManager_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyManager{}, &KeyManagerList{})
}
