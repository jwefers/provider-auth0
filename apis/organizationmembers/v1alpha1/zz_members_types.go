// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MembersInitParameters struct {

	// (Set of String) Add user ID(s) directly from the tenant to become members of the organization.
	// Add user ID(s) directly from the tenant to become members of the organization.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) The ID of the organization to assign the members to.
	// The ID of the organization to assign the members to.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

type MembersObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) Add user ID(s) directly from the tenant to become members of the organization.
	// Add user ID(s) directly from the tenant to become members of the organization.
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) The ID of the organization to assign the members to.
	// The ID of the organization to assign the members to.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

type MembersParameters struct {

	// (Set of String) Add user ID(s) directly from the tenant to become members of the organization.
	// Add user ID(s) directly from the tenant to become members of the organization.
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// (String) The ID of the organization to assign the members to.
	// The ID of the organization to assign the members to.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`
}

// MembersSpec defines the desired state of Members
type MembersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MembersParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MembersInitParameters `json:"initProvider,omitempty"`
}

// MembersStatus defines the observed state of Members.
type MembersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MembersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Members is the Schema for the Memberss API. This resource is used to manage members of an organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Members struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.members) || (has(self.initProvider) && has(self.initProvider.members))",message="spec.forProvider.members is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organizationId) || (has(self.initProvider) && has(self.initProvider.organizationId))",message="spec.forProvider.organizationId is a required parameter"
	Spec   MembersSpec   `json:"spec"`
	Status MembersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MembersList contains a list of Memberss
type MembersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Members `json:"items"`
}

// Repository type metadata.
var (
	Members_Kind             = "Members"
	Members_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Members_Kind}.String()
	Members_KindAPIVersion   = Members_Kind + "." + CRDGroupVersion.String()
	Members_GroupVersionKind = CRDGroupVersion.WithKind(Members_Kind)
)

func init() {
	SchemeBuilder.Register(&Members{}, &MembersList{})
}
