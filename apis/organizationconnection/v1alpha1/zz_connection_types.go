// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionInitParameters struct {

	// (Boolean) When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	// When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assignMembershipOnLogin,omitempty" tf:"assign_membership_on_login,omitempty"`

	// (String) The ID of the connection to enable for the organization.
	// The ID of the connection to enable for the organization.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// up should be enabled for this organization connection. Only applicable for database connections. Note: is_signup_enabled can only be true if assign_membership_on_login is true.
	// Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
	IsSignupEnabled *bool `json:"isSignupEnabled,omitempty" tf:"is_signup_enabled,omitempty"`

	// (String) The ID of the organization to enable the connection for.
	// The ID of the organization to enable the connection for.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Boolean) Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
	ShowAsButton *bool `json:"showAsButton,omitempty" tf:"show_as_button,omitempty"`
}

type ConnectionObservation struct {

	// (Boolean) When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	// When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
	AssignMembershipOnLogin *bool `json:"assignMembershipOnLogin,omitempty" tf:"assign_membership_on_login,omitempty"`

	// (String) The ID of the connection to enable for the organization.
	// The ID of the connection to enable for the organization.
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// up should be enabled for this organization connection. Only applicable for database connections. Note: is_signup_enabled can only be true if assign_membership_on_login is true.
	// Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
	IsSignupEnabled *bool `json:"isSignupEnabled,omitempty" tf:"is_signup_enabled,omitempty"`

	// (String) The name of the enabled connection.
	// The name of the enabled connection.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the organization to enable the connection for.
	// The ID of the organization to enable the connection for.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Boolean) Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
	ShowAsButton *bool `json:"showAsButton,omitempty" tf:"show_as_button,omitempty"`

	// (String) The strategy of the enabled connection.
	// The strategy of the enabled connection.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`
}

type ConnectionParameters struct {

	// (Boolean) When true, all users that log in with this connection will be automatically granted membership in the organization. When false, users must be granted membership in the organization before logging in with this connection.
	// When `true`, all users that log in with this connection will be automatically granted membership in the organization. When `false`, users must be granted membership in the organization before logging in with this connection.
	// +kubebuilder:validation:Optional
	AssignMembershipOnLogin *bool `json:"assignMembershipOnLogin,omitempty" tf:"assign_membership_on_login,omitempty"`

	// (String) The ID of the connection to enable for the organization.
	// The ID of the connection to enable for the organization.
	// +kubebuilder:validation:Optional
	ConnectionID *string `json:"connectionId,omitempty" tf:"connection_id,omitempty"`

	// up should be enabled for this organization connection. Only applicable for database connections. Note: is_signup_enabled can only be true if assign_membership_on_login is true.
	// Determines whether organization sign-up should be enabled for this organization connection. Only applicable for database connections. Note: `is_signup_enabled` can only be `true` if `assign_membership_on_login` is `true`.
	// +kubebuilder:validation:Optional
	IsSignupEnabled *bool `json:"isSignupEnabled,omitempty" tf:"is_signup_enabled,omitempty"`

	// (String) The ID of the organization to enable the connection for.
	// The ID of the organization to enable the connection for.
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// (Boolean) Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
	// Determines whether a connection should be displayed on this organization’s login prompt. Only applicable for enterprise connections.
	// +kubebuilder:validation:Optional
	ShowAsButton *bool `json:"showAsButton,omitempty" tf:"show_as_button,omitempty"`
}

// ConnectionSpec defines the desired state of Connection
type ConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectionInitParameters `json:"initProvider,omitempty"`
}

// ConnectionStatus defines the observed state of Connection.
type ConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Connection is the Schema for the Connections API. With this resource, you can manage enabled connections on an organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Connection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionId) || (has(self.initProvider) && has(self.initProvider.connectionId))",message="spec.forProvider.connectionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organizationId) || (has(self.initProvider) && has(self.initProvider.organizationId))",message="spec.forProvider.organizationId is a required parameter"
	Spec   ConnectionSpec   `json:"spec"`
	Status ConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionList contains a list of Connections
type ConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Connection `json:"items"`
}

// Repository type metadata.
var (
	Connection_Kind             = "Connection"
	Connection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Connection_Kind}.String()
	Connection_KindAPIVersion   = Connection_Kind + "." + CRDGroupVersion.String()
	Connection_GroupVersionKind = CRDGroupVersion.WithKind(Connection_Kind)
)

func init() {
	SchemeBuilder.Register(&Connection{}, &ConnectionList{})
}
