// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BreachedPasswordDetectionInitParameters struct {

	// (Set of String) When admin_notification is enabled within the shields property, determines how often email notifications are sent. Possible values: immediately, daily, weekly, monthly.
	// When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
	// +listType=set
	AdminNotificationFrequency []*string `json:"adminNotificationFrequency,omitempty" tf:"admin_notification_frequency,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether breached password detection is active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: standard, enhanced.
	// The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: `standard`, `enhanced`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every user registration attempt. Only available on public tenants.
	PreUserRegistration []PreUserRegistrationInitParameters `json:"preUserRegistration,omitempty" tf:"pre_user_registration,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type BreachedPasswordDetectionObservation struct {

	// (Set of String) When admin_notification is enabled within the shields property, determines how often email notifications are sent. Possible values: immediately, daily, weekly, monthly.
	// When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
	// +listType=set
	AdminNotificationFrequency []*string `json:"adminNotificationFrequency,omitempty" tf:"admin_notification_frequency,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether breached password detection is active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: standard, enhanced.
	// The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: `standard`, `enhanced`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every user registration attempt. Only available on public tenants.
	PreUserRegistration []PreUserRegistrationObservation `json:"preUserRegistration,omitempty" tf:"pre_user_registration,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type BreachedPasswordDetectionParameters struct {

	// (Set of String) When admin_notification is enabled within the shields property, determines how often email notifications are sent. Possible values: immediately, daily, weekly, monthly.
	// When `admin_notification` is enabled within the `shields` property, determines how often email notifications are sent. Possible values: `immediately`, `daily`, `weekly`, `monthly`.
	// +kubebuilder:validation:Optional
	// +listType=set
	AdminNotificationFrequency []*string `json:"adminNotificationFrequency,omitempty" tf:"admin_notification_frequency,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether breached password detection is active.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: standard, enhanced.
	// The subscription level for breached password detection methods. Use "enhanced" to enable Credential Guard. Possible values: `standard`, `enhanced`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every user registration attempt. Only available on public tenants.
	// +kubebuilder:validation:Optional
	PreUserRegistration []PreUserRegistrationParameters `json:"preUserRegistration,omitempty" tf:"pre_user_registration,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a breached password is detected. Options include: `block` (block compromised user accounts), `user_notification` (send an email to user when we detect that they are using compromised credentials) and `admin_notification` (send an email with a summary of the number of accounts logging in with compromised credentials).
	// +kubebuilder:validation:Optional
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type BruteForceProtectionInitParameters struct {

	// (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// +listType=set
	Allowlist []*string `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether brute force attack protections are active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (String) Determines whether the IP address is used when counting failed attempts. Possible values: count_per_identifier_and_ip (lockout an account from a given IP Address) or count_per_identifier (lockout an account regardless of IP Address).
	// Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type BruteForceProtectionObservation struct {

	// (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// +listType=set
	Allowlist []*string `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether brute force attack protections are active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (String) Determines whether the IP address is used when counting failed attempts. Possible values: count_per_identifier_and_ip (lockout an account from a given IP Address) or count_per_identifier (lockout an account regardless of IP Address).
	// Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type BruteForceProtectionParameters struct {

	// (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// +kubebuilder:validation:Optional
	// +listType=set
	Allowlist []*string `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether brute force attack protections are active.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// +kubebuilder:validation:Optional
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (String) Determines whether the IP address is used when counting failed attempts. Possible values: count_per_identifier_and_ip (lockout an account from a given IP Address) or count_per_identifier (lockout an account regardless of IP Address).
	// Determines whether the IP address is used when counting failed attempts. Possible values: `count_per_identifier_and_ip` (lockout an account from a given IP Address) or `count_per_identifier` (lockout an account regardless of IP Address).
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a brute force protection threshold is violated. Possible values: `block` (block login attempts for a flagged user account), `user_notification` (send an email to user when their account has been blocked).
	// +kubebuilder:validation:Optional
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type PreLoginInitParameters struct {

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// The maximum number of failed login attempts allowed from a single IP address.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

type PreLoginObservation struct {

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// The maximum number of failed login attempts allowed from a single IP address.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

type PreLoginParameters struct {

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// The maximum number of failed login attempts allowed from a single IP address.
	// +kubebuilder:validation:Optional
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// +kubebuilder:validation:Optional
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

type PreUserRegistrationInitParameters struct {

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type PreUserRegistrationObservation struct {

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type PreUserRegistrationParameters struct {

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a breached password is detected during a signup. Possible values: `block` (block compromised credentials for new accounts), `admin_notification` (send an email notification with a summary of compromised credentials in new accounts).
	// +kubebuilder:validation:Optional
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type ProtectionInitParameters struct {

	// (Block List, Max: 1) Breached password detection protects your applications from bad actors logging in with stolen credentials. (see below for nested schema)
	// Breached password detection protects your applications from bad actors logging in with stolen credentials.
	BreachedPasswordDetection []BreachedPasswordDetectionInitParameters `json:"breachedPasswordDetection,omitempty" tf:"breached_password_detection,omitempty"`

	// force protection safeguards against a single IP address attacking a single user account. (see below for nested schema)
	// Brute-force protection safeguards against a single IP address attacking a single user account.
	BruteForceProtection []BruteForceProtectionInitParameters `json:"bruteForceProtection,omitempty" tf:"brute_force_protection,omitempty"`

	// (Block List, Max: 1) Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups. (see below for nested schema)
	// Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.
	SuspiciousIPThrottling []SuspiciousIPThrottlingInitParameters `json:"suspiciousIpThrottling,omitempty" tf:"suspicious_ip_throttling,omitempty"`
}

type ProtectionObservation struct {

	// (Block List, Max: 1) Breached password detection protects your applications from bad actors logging in with stolen credentials. (see below for nested schema)
	// Breached password detection protects your applications from bad actors logging in with stolen credentials.
	BreachedPasswordDetection []BreachedPasswordDetectionObservation `json:"breachedPasswordDetection,omitempty" tf:"breached_password_detection,omitempty"`

	// force protection safeguards against a single IP address attacking a single user account. (see below for nested schema)
	// Brute-force protection safeguards against a single IP address attacking a single user account.
	BruteForceProtection []BruteForceProtectionObservation `json:"bruteForceProtection,omitempty" tf:"brute_force_protection,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups. (see below for nested schema)
	// Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.
	SuspiciousIPThrottling []SuspiciousIPThrottlingObservation `json:"suspiciousIpThrottling,omitempty" tf:"suspicious_ip_throttling,omitempty"`
}

type ProtectionParameters struct {

	// (Block List, Max: 1) Breached password detection protects your applications from bad actors logging in with stolen credentials. (see below for nested schema)
	// Breached password detection protects your applications from bad actors logging in with stolen credentials.
	// +kubebuilder:validation:Optional
	BreachedPasswordDetection []BreachedPasswordDetectionParameters `json:"breachedPasswordDetection,omitempty" tf:"breached_password_detection,omitempty"`

	// force protection safeguards against a single IP address attacking a single user account. (see below for nested schema)
	// Brute-force protection safeguards against a single IP address attacking a single user account.
	// +kubebuilder:validation:Optional
	BruteForceProtection []BruteForceProtectionParameters `json:"bruteForceProtection,omitempty" tf:"brute_force_protection,omitempty"`

	// (Block List, Max: 1) Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups. (see below for nested schema)
	// Suspicious IP throttling blocks traffic from any IP address that rapidly attempts too many logins or signups.
	// +kubebuilder:validation:Optional
	SuspiciousIPThrottling []SuspiciousIPThrottlingParameters `json:"suspiciousIpThrottling,omitempty" tf:"suspicious_ip_throttling,omitempty"`
}

type SuspiciousIPThrottlingInitParameters struct {

	// (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// +listType=set
	Allowlist []*string `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether suspicious IP throttling attack protections are active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every login attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every login attempt. Only available on public tenants.
	PreLogin []PreLoginInitParameters `json:"preLogin,omitempty" tf:"pre_login,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every user registration attempt. Only available on public tenants.
	PreUserRegistration []SuspiciousIPThrottlingPreUserRegistrationInitParameters `json:"preUserRegistration,omitempty" tf:"pre_user_registration,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type SuspiciousIPThrottlingObservation struct {

	// (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// +listType=set
	Allowlist []*string `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether suspicious IP throttling attack protections are active.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every login attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every login attempt. Only available on public tenants.
	PreLogin []PreLoginObservation `json:"preLogin,omitempty" tf:"pre_login,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every user registration attempt. Only available on public tenants.
	PreUserRegistration []SuspiciousIPThrottlingPreUserRegistrationObservation `json:"preUserRegistration,omitempty" tf:"pre_user_registration,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type SuspiciousIPThrottlingParameters struct {

	// (Set of String) List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// List of trusted IP addresses that will not have attack protection enforced against them. This field allows you to specify multiple IP addresses, or ranges. You can use IPv4 or IPv6 addresses and CIDR notation.
	// +kubebuilder:validation:Optional
	// +listType=set
	Allowlist []*string `json:"allowlist,omitempty" tf:"allowlist,omitempty"`

	// (Boolean) Whether breached password detection is active.
	// Whether suspicious IP throttling attack protections are active.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every login attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every login attempt. Only available on public tenants.
	// +kubebuilder:validation:Optional
	PreLogin []PreLoginParameters `json:"preLogin,omitempty" tf:"pre_login,omitempty"`

	// (Block List, Max: 1) Configuration options that apply before every user registration attempt. Only available on public tenants. (see below for nested schema)
	// Configuration options that apply before every user registration attempt. Only available on public tenants.
	// +kubebuilder:validation:Optional
	PreUserRegistration []SuspiciousIPThrottlingPreUserRegistrationParameters `json:"preUserRegistration,omitempty" tf:"pre_user_registration,omitempty"`

	// (Set of String) Action to take when a breached password is detected. Options include: block (block compromised user accounts), user_notification (send an email to user when we detect that they are using compromised credentials) and admin_notification (send an email with a summary of the number of accounts logging in with compromised credentials).
	// Action to take when a suspicious IP throttling threshold is violated. Possible values: `block` (throttle traffic from an IP address when there is a high number of login attempts targeting too many different accounts), `admin_notification` (send an email notification when traffic is throttled on one or more IP addresses due to high-velocity traffic).
	// +kubebuilder:validation:Optional
	// +listType=set
	Shields []*string `json:"shields,omitempty" tf:"shields,omitempty"`
}

type SuspiciousIPThrottlingPreUserRegistrationInitParameters struct {

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// The maximum number of sign up attempts allowed from a single IP address.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// Interval of time, given in milliseconds at which new sign up tokens will become available after they have been used by an IP address. Each sign up attempt will be added on the defined throttling rate.
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

type SuspiciousIPThrottlingPreUserRegistrationObservation struct {

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// The maximum number of sign up attempts allowed from a single IP address.
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// Interval of time, given in milliseconds at which new sign up tokens will become available after they have been used by an IP address. Each sign up attempt will be added on the defined throttling rate.
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

type SuspiciousIPThrottlingPreUserRegistrationParameters struct {

	// (Number) Maximum number of consecutive failed login attempts from a single user before blocking is triggered. Only available on public tenants.
	// The maximum number of sign up attempts allowed from a single IP address.
	// +kubebuilder:validation:Optional
	MaxAttempts *float64 `json:"maxAttempts,omitempty" tf:"max_attempts,omitempty"`

	// (Number) Interval of time, given in milliseconds at which new login tokens will become available after they have been used by an IP address. Each login attempt will be added on the defined throttling rate.
	// Interval of time, given in milliseconds at which new sign up tokens will become available after they have been used by an IP address. Each sign up attempt will be added on the defined throttling rate.
	// +kubebuilder:validation:Optional
	Rate *float64 `json:"rate,omitempty" tf:"rate,omitempty"`
}

// ProtectionSpec defines the desired state of Protection
type ProtectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProtectionInitParameters `json:"initProvider,omitempty"`
}

// ProtectionStatus defines the observed state of Protection.
type ProtectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Protection is the Schema for the Protections API. Auth0 can detect attacks and stop malicious attempts to access your application such as blocking traffic from certain IPs and displaying CAPTCHAs.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Protection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectionSpec   `json:"spec"`
	Status            ProtectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionList contains a list of Protections
type ProtectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Protection `json:"items"`
}

// Repository type metadata.
var (
	Protection_Kind             = "Protection"
	Protection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Protection_Kind}.String()
	Protection_KindAPIVersion   = Protection_Kind + "." + CRDGroupVersion.String()
	Protection_GroupVersionKind = CRDGroupVersion.WithKind(Protection_Kind)
)

func init() {
	SchemeBuilder.Register(&Protection{}, &ProtectionList{})
}
