// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// (String) Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
	// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
	AppMetadata *string `json:"appMetadata,omitempty" tf:"app_metadata,omitempty"`

	// (Boolean) Indicates whether the user is blocked or not.
	// Indicates whether the user is blocked or not.
	Blocked *bool `json:"blocked,omitempty" tf:"blocked,omitempty"`

	// (String) Name of the connection from which the user information was sourced.
	// Name of the connection from which the user information was sourced.
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// (String) Email address of the user.
	// Email address of the user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean) Indicates whether the email address has been verified.
	// Indicates whether the email address has been verified.
	EmailVerified *bool `json:"emailVerified,omitempty" tf:"email_verified,omitempty"`

	// (String) Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	FamilyName *string `json:"familyName,omitempty" tf:"family_name,omitempty"`

	// (String) Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`

	// (String) Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	Nickname *string `json:"nickname,omitempty" tf:"nickname,omitempty"`

	// passwordless connections (SMS and email).
	// Initial password for this user. Required for non-passwordless connections (SMS and email).
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
	// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// (Boolean) Indicates whether the phone number has been verified.
	// Indicates whether the phone number has been verified.
	PhoneVerified *bool `json:"phoneVerified,omitempty" tf:"phone_verified,omitempty"`

	// (String) Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	Picture *string `json:"picture,omitempty" tf:"picture,omitempty"`

	// (String) ID of the user.
	// ID of the user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// (String) Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
	// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
	UserMetadata *string `json:"userMetadata,omitempty" tf:"user_metadata,omitempty"`

	// (String) Username of the user. Only valid if the connection requires a username.
	// Username of the user. Only valid if the connection requires a username.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (Boolean) Indicates whether the user will receive a verification email after creation. Overrides behavior of email_verified parameter.
	// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
	VerifyEmail *bool `json:"verifyEmail,omitempty" tf:"verify_email,omitempty"`
}

type UserObservation struct {

	// (String) Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
	// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
	AppMetadata *string `json:"appMetadata,omitempty" tf:"app_metadata,omitempty"`

	// (Boolean) Indicates whether the user is blocked or not.
	// Indicates whether the user is blocked or not.
	Blocked *bool `json:"blocked,omitempty" tf:"blocked,omitempty"`

	// (String) Name of the connection from which the user information was sourced.
	// Name of the connection from which the user information was sourced.
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// (String) Email address of the user.
	// Email address of the user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean) Indicates whether the email address has been verified.
	// Indicates whether the email address has been verified.
	EmailVerified *bool `json:"emailVerified,omitempty" tf:"email_verified,omitempty"`

	// (String) Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	FamilyName *string `json:"familyName,omitempty" tf:"family_name,omitempty"`

	// (String) Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	Nickname *string `json:"nickname,omitempty" tf:"nickname,omitempty"`

	// (String) Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
	// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// (Boolean) Indicates whether the phone number has been verified.
	// Indicates whether the phone number has been verified.
	PhoneVerified *bool `json:"phoneVerified,omitempty" tf:"phone_verified,omitempty"`

	// (String) Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	Picture *string `json:"picture,omitempty" tf:"picture,omitempty"`

	// (String) ID of the user.
	// ID of the user.
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// (String) Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
	// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
	UserMetadata *string `json:"userMetadata,omitempty" tf:"user_metadata,omitempty"`

	// (String) Username of the user. Only valid if the connection requires a username.
	// Username of the user. Only valid if the connection requires a username.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (Boolean) Indicates whether the user will receive a verification email after creation. Overrides behavior of email_verified parameter.
	// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
	VerifyEmail *bool `json:"verifyEmail,omitempty" tf:"verify_email,omitempty"`
}

type UserParameters struct {

	// (String) Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
	// Custom fields that store info about the user that impact the user's core functionality, such as how an application functions or what the user can access. Examples include support plans and IDs for external accounts.
	// +kubebuilder:validation:Optional
	AppMetadata *string `json:"appMetadata,omitempty" tf:"app_metadata,omitempty"`

	// (Boolean) Indicates whether the user is blocked or not.
	// Indicates whether the user is blocked or not.
	// +kubebuilder:validation:Optional
	Blocked *bool `json:"blocked,omitempty" tf:"blocked,omitempty"`

	// (String) Name of the connection from which the user information was sourced.
	// Name of the connection from which the user information was sourced.
	// +kubebuilder:validation:Optional
	ConnectionName *string `json:"connectionName,omitempty" tf:"connection_name,omitempty"`

	// (String) Email address of the user.
	// Email address of the user.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Boolean) Indicates whether the email address has been verified.
	// Indicates whether the email address has been verified.
	// +kubebuilder:validation:Optional
	EmailVerified *bool `json:"emailVerified,omitempty" tf:"email_verified,omitempty"`

	// (String) Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Family name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	// +kubebuilder:validation:Optional
	FamilyName *string `json:"familyName,omitempty" tf:"family_name,omitempty"`

	// (String) Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Given name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	// +kubebuilder:validation:Optional
	GivenName *string `json:"givenName,omitempty" tf:"given_name,omitempty"`

	// (String) Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Name of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Preferred nickname or alias of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	// +kubebuilder:validation:Optional
	Nickname *string `json:"nickname,omitempty" tf:"nickname,omitempty"`

	// passwordless connections (SMS and email).
	// Initial password for this user. Required for non-passwordless connections (SMS and email).
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
	// Phone number for the user; follows the E.164 recommendation. Used for SMS connections.
	// +kubebuilder:validation:Optional
	PhoneNumber *string `json:"phoneNumber,omitempty" tf:"phone_number,omitempty"`

	// (Boolean) Indicates whether the phone number has been verified.
	// Indicates whether the phone number has been verified.
	// +kubebuilder:validation:Optional
	PhoneVerified *bool `json:"phoneVerified,omitempty" tf:"phone_verified,omitempty"`

	// (String) Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: Configure Identity Provider Connection for User Profile Updates.
	// Picture of the user. This value can only be updated if the connection is a database connection (using the Auth0 store), a passwordless connection (email or sms) or has disabled 'Sync user profile attributes at each login'. For more information, see: [Configure Identity Provider Connection for User Profile Updates](https://auth0.com/docs/manage-users/user-accounts/user-profiles/configure-connection-sync-with-auth0).
	// +kubebuilder:validation:Optional
	Picture *string `json:"picture,omitempty" tf:"picture,omitempty"`

	// (String) ID of the user.
	// ID of the user.
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`

	// (String) Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
	// Custom fields that store info about the user that does not impact a user's core functionality. Examples include work address, home address, and user preferences.
	// +kubebuilder:validation:Optional
	UserMetadata *string `json:"userMetadata,omitempty" tf:"user_metadata,omitempty"`

	// (String) Username of the user. Only valid if the connection requires a username.
	// Username of the user. Only valid if the connection requires a username.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// (Boolean) Indicates whether the user will receive a verification email after creation. Overrides behavior of email_verified parameter.
	// Indicates whether the user will receive a verification email after creation. Overrides behavior of `email_verified` parameter.
	// +kubebuilder:validation:Optional
	VerifyEmail *bool `json:"verifyEmail,omitempty" tf:"verify_email,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. With this resource, you can manage user identities, including resetting passwords, and creating, provisioning, blocking, and deleting users.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectionName) || (has(self.initProvider) && has(self.initProvider.connectionName))",message="spec.forProvider.connectionName is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
