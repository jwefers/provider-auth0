// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainVerificationInitParameters struct {

	// (String) ID of the custom domain resource.
	// ID of the custom domain resource.
	CustomDomainID *string `json:"customDomainId,omitempty" tf:"custom_domain_id,omitempty"`
}

type DomainVerificationObservation struct {

	// (String) ID of the custom domain resource.
	// ID of the custom domain resource.
	CustomDomainID *string `json:"customDomainId,omitempty" tf:"custom_domain_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The DNS name of the Auth0 origin server that handles traffic for the custom domain.
	// The DNS name of the Auth0 origin server that handles traffic for the custom domain.
	OriginDomainName *string `json:"originDomainName,omitempty" tf:"origin_domain_name,omitempty"`
}

type DomainVerificationParameters struct {

	// (String) ID of the custom domain resource.
	// ID of the custom domain resource.
	// +kubebuilder:validation:Optional
	CustomDomainID *string `json:"customDomainId,omitempty" tf:"custom_domain_id,omitempty"`
}

// DomainVerificationSpec defines the desired state of DomainVerification
type DomainVerificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainVerificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainVerificationInitParameters `json:"initProvider,omitempty"`
}

// DomainVerificationStatus defines the observed state of DomainVerification.
type DomainVerificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainVerificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DomainVerification is the Schema for the DomainVerifications API. With Auth0, you can use a custom domain to maintain a consistent user experience. This is a three-step process; you must configure the custom domain in Auth0, then create a DNS record for the domain, then verify the DNS record in Auth0. This resource allows for automating the verification part of the process.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type DomainVerification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.customDomainId) || (has(self.initProvider) && has(self.initProvider.customDomainId))",message="spec.forProvider.customDomainId is a required parameter"
	Spec   DomainVerificationSpec   `json:"spec"`
	Status DomainVerificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainVerificationList contains a list of DomainVerifications
type DomainVerificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainVerification `json:"items"`
}

// Repository type metadata.
var (
	DomainVerification_Kind             = "DomainVerification"
	DomainVerification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainVerification_Kind}.String()
	DomainVerification_KindAPIVersion   = DomainVerification_Kind + "." + CRDGroupVersion.String()
	DomainVerification_GroupVersionKind = CRDGroupVersion.WithKind(DomainVerification_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainVerification{}, &DomainVerificationList{})
}
