// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ScreenRendererInitParameters struct {

	// (Set of String) Context values to make available
	// Context values to make available
	// +listType=set
	ContextConfiguration []*string `json:"contextConfiguration,omitempty" tf:"context_configuration,omitempty"`

	// (Boolean) Override Universal Login default head tags
	// Override Universal Login default head tags
	DefaultHeadTagsDisabled *bool `json:"defaultHeadTagsDisabled,omitempty" tf:"default_head_tags_disabled,omitempty"`

	// (String) An array of head tags
	// An array of head tags
	HeadTags *string `json:"headTags,omitempty" tf:"head_tags,omitempty"`

	// id, signup-password, login-id, login-password, login-passwordless, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkeys, captcha, login, signup, reset-password, mfa, mfa-sms, mfa-email, mfa-push.
	// The prompt that you are configuring settings for. Options are: `signup-id`, `signup-password`, `login-id`, `login-password`, `login-passwordless`, `phone-identifier-enrollment`, `phone-identifier-challenge`, `email-identifier-challenge`, `passkeys`, `captcha`, `login`, `signup`, `reset-password`, `mfa`, `mfa-sms`, `mfa-email`, `mfa-push`.
	PromptType *string `json:"promptType,omitempty" tf:"prompt_type,omitempty"`

	// (String) Rendering modeOptions are: standard, advanced.
	// Rendering modeOptions are: `standard`, `advanced`.
	RenderingMode *string `json:"renderingMode,omitempty" tf:"rendering_mode,omitempty"`

	// id, signup-password, login-id, login-password, login-passwordless-sms-otp, login-passwordless-email-code, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkey-enrollment, passkey-enrollment-local, interstitial-captcha, login, signup, reset-password-request, reset-password-email, reset-password, reset-password-success, reset-password-error, mfa-detect-browser-capabilities, mfa-enroll-result, mfa-begin-enroll-options, mfa-login-options, mfa-country-codes, mfa-sms-challenge, mfa-sms-enrollment, mfa-sms-list, mfa-email-challenge, mfa-email-list, mfa-push-challenge-push, mfa-push-enrollment-qr, mfa-push-list, mfa-push-welcome.
	// The screen that you are configuring settings for. Options are: `signup-id`, `signup-password`, `login-id`, `login-password`, `login-passwordless-sms-otp`, `login-passwordless-email-code`, `phone-identifier-enrollment`, `phone-identifier-challenge`, `email-identifier-challenge`, `passkey-enrollment`, `passkey-enrollment-local`, `interstitial-captcha`, `login`, `signup`, `reset-password-request`, `reset-password-email`, `reset-password`, `reset-password-success`, `reset-password-error`, `mfa-detect-browser-capabilities`, `mfa-enroll-result`, `mfa-begin-enroll-options`, `mfa-login-options`, `mfa-country-codes`, `mfa-sms-challenge`, `mfa-sms-enrollment`, `mfa-sms-list`, `mfa-email-challenge`, `mfa-email-list`, `mfa-push-challenge-push`, `mfa-push-enrollment-qr`, `mfa-push-list`, `mfa-push-welcome`.
	ScreenName *string `json:"screenName,omitempty" tf:"screen_name,omitempty"`
}

type ScreenRendererObservation struct {

	// (Set of String) Context values to make available
	// Context values to make available
	// +listType=set
	ContextConfiguration []*string `json:"contextConfiguration,omitempty" tf:"context_configuration,omitempty"`

	// (Boolean) Override Universal Login default head tags
	// Override Universal Login default head tags
	DefaultHeadTagsDisabled *bool `json:"defaultHeadTagsDisabled,omitempty" tf:"default_head_tags_disabled,omitempty"`

	// (String) An array of head tags
	// An array of head tags
	HeadTags *string `json:"headTags,omitempty" tf:"head_tags,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// id, signup-password, login-id, login-password, login-passwordless, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkeys, captcha, login, signup, reset-password, mfa, mfa-sms, mfa-email, mfa-push.
	// The prompt that you are configuring settings for. Options are: `signup-id`, `signup-password`, `login-id`, `login-password`, `login-passwordless`, `phone-identifier-enrollment`, `phone-identifier-challenge`, `email-identifier-challenge`, `passkeys`, `captcha`, `login`, `signup`, `reset-password`, `mfa`, `mfa-sms`, `mfa-email`, `mfa-push`.
	PromptType *string `json:"promptType,omitempty" tf:"prompt_type,omitempty"`

	// (String) Rendering modeOptions are: standard, advanced.
	// Rendering modeOptions are: `standard`, `advanced`.
	RenderingMode *string `json:"renderingMode,omitempty" tf:"rendering_mode,omitempty"`

	// id, signup-password, login-id, login-password, login-passwordless-sms-otp, login-passwordless-email-code, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkey-enrollment, passkey-enrollment-local, interstitial-captcha, login, signup, reset-password-request, reset-password-email, reset-password, reset-password-success, reset-password-error, mfa-detect-browser-capabilities, mfa-enroll-result, mfa-begin-enroll-options, mfa-login-options, mfa-country-codes, mfa-sms-challenge, mfa-sms-enrollment, mfa-sms-list, mfa-email-challenge, mfa-email-list, mfa-push-challenge-push, mfa-push-enrollment-qr, mfa-push-list, mfa-push-welcome.
	// The screen that you are configuring settings for. Options are: `signup-id`, `signup-password`, `login-id`, `login-password`, `login-passwordless-sms-otp`, `login-passwordless-email-code`, `phone-identifier-enrollment`, `phone-identifier-challenge`, `email-identifier-challenge`, `passkey-enrollment`, `passkey-enrollment-local`, `interstitial-captcha`, `login`, `signup`, `reset-password-request`, `reset-password-email`, `reset-password`, `reset-password-success`, `reset-password-error`, `mfa-detect-browser-capabilities`, `mfa-enroll-result`, `mfa-begin-enroll-options`, `mfa-login-options`, `mfa-country-codes`, `mfa-sms-challenge`, `mfa-sms-enrollment`, `mfa-sms-list`, `mfa-email-challenge`, `mfa-email-list`, `mfa-push-challenge-push`, `mfa-push-enrollment-qr`, `mfa-push-list`, `mfa-push-welcome`.
	ScreenName *string `json:"screenName,omitempty" tf:"screen_name,omitempty"`

	// (String) Tenant ID
	// Tenant ID
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`
}

type ScreenRendererParameters struct {

	// (Set of String) Context values to make available
	// Context values to make available
	// +kubebuilder:validation:Optional
	// +listType=set
	ContextConfiguration []*string `json:"contextConfiguration,omitempty" tf:"context_configuration,omitempty"`

	// (Boolean) Override Universal Login default head tags
	// Override Universal Login default head tags
	// +kubebuilder:validation:Optional
	DefaultHeadTagsDisabled *bool `json:"defaultHeadTagsDisabled,omitempty" tf:"default_head_tags_disabled,omitempty"`

	// (String) An array of head tags
	// An array of head tags
	// +kubebuilder:validation:Optional
	HeadTags *string `json:"headTags,omitempty" tf:"head_tags,omitempty"`

	// id, signup-password, login-id, login-password, login-passwordless, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkeys, captcha, login, signup, reset-password, mfa, mfa-sms, mfa-email, mfa-push.
	// The prompt that you are configuring settings for. Options are: `signup-id`, `signup-password`, `login-id`, `login-password`, `login-passwordless`, `phone-identifier-enrollment`, `phone-identifier-challenge`, `email-identifier-challenge`, `passkeys`, `captcha`, `login`, `signup`, `reset-password`, `mfa`, `mfa-sms`, `mfa-email`, `mfa-push`.
	// +kubebuilder:validation:Optional
	PromptType *string `json:"promptType,omitempty" tf:"prompt_type,omitempty"`

	// (String) Rendering modeOptions are: standard, advanced.
	// Rendering modeOptions are: `standard`, `advanced`.
	// +kubebuilder:validation:Optional
	RenderingMode *string `json:"renderingMode,omitempty" tf:"rendering_mode,omitempty"`

	// id, signup-password, login-id, login-password, login-passwordless-sms-otp, login-passwordless-email-code, phone-identifier-enrollment, phone-identifier-challenge, email-identifier-challenge, passkey-enrollment, passkey-enrollment-local, interstitial-captcha, login, signup, reset-password-request, reset-password-email, reset-password, reset-password-success, reset-password-error, mfa-detect-browser-capabilities, mfa-enroll-result, mfa-begin-enroll-options, mfa-login-options, mfa-country-codes, mfa-sms-challenge, mfa-sms-enrollment, mfa-sms-list, mfa-email-challenge, mfa-email-list, mfa-push-challenge-push, mfa-push-enrollment-qr, mfa-push-list, mfa-push-welcome.
	// The screen that you are configuring settings for. Options are: `signup-id`, `signup-password`, `login-id`, `login-password`, `login-passwordless-sms-otp`, `login-passwordless-email-code`, `phone-identifier-enrollment`, `phone-identifier-challenge`, `email-identifier-challenge`, `passkey-enrollment`, `passkey-enrollment-local`, `interstitial-captcha`, `login`, `signup`, `reset-password-request`, `reset-password-email`, `reset-password`, `reset-password-success`, `reset-password-error`, `mfa-detect-browser-capabilities`, `mfa-enroll-result`, `mfa-begin-enroll-options`, `mfa-login-options`, `mfa-country-codes`, `mfa-sms-challenge`, `mfa-sms-enrollment`, `mfa-sms-list`, `mfa-email-challenge`, `mfa-email-list`, `mfa-push-challenge-push`, `mfa-push-enrollment-qr`, `mfa-push-list`, `mfa-push-welcome`.
	// +kubebuilder:validation:Optional
	ScreenName *string `json:"screenName,omitempty" tf:"screen_name,omitempty"`
}

// ScreenRendererSpec defines the desired state of ScreenRenderer
type ScreenRendererSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ScreenRendererParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ScreenRendererInitParameters `json:"initProvider,omitempty"`
}

// ScreenRendererStatus defines the observed state of ScreenRenderer.
type ScreenRendererStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ScreenRendererObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ScreenRenderer is the Schema for the ScreenRenderers API. With this resource, you can Configure the render settings for a specific screen.You can read more about this here https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type ScreenRenderer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.promptType) || (has(self.initProvider) && has(self.initProvider.promptType))",message="spec.forProvider.promptType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.screenName) || (has(self.initProvider) && has(self.initProvider.screenName))",message="spec.forProvider.screenName is a required parameter"
	Spec   ScreenRendererSpec   `json:"spec"`
	Status ScreenRendererStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScreenRendererList contains a list of ScreenRenderers
type ScreenRendererList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ScreenRenderer `json:"items"`
}

// Repository type metadata.
var (
	ScreenRenderer_Kind             = "ScreenRenderer"
	ScreenRenderer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScreenRenderer_Kind}.String()
	ScreenRenderer_KindAPIVersion   = ScreenRenderer_Kind + "." + CRDGroupVersion.String()
	ScreenRenderer_GroupVersionKind = CRDGroupVersion.WithKind(ScreenRenderer_Kind)
)

func init() {
	SchemeBuilder.Register(&ScreenRenderer{}, &ScreenRendererList{})
}
