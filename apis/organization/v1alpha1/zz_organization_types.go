// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BrandingInitParameters struct {

	// (Map of String) Color scheme used to customize the login pages.
	// Color scheme used to customize the login pages.
	// +mapType=granular
	Colors map[string]*string `json:"colors,omitempty" tf:"colors,omitempty"`

	// (String) URL of logo to display on login page.
	// URL of logo to display on login page.
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`
}

type BrandingObservation struct {

	// (Map of String) Color scheme used to customize the login pages.
	// Color scheme used to customize the login pages.
	// +mapType=granular
	Colors map[string]*string `json:"colors,omitempty" tf:"colors,omitempty"`

	// (String) URL of logo to display on login page.
	// URL of logo to display on login page.
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`
}

type BrandingParameters struct {

	// (Map of String) Color scheme used to customize the login pages.
	// Color scheme used to customize the login pages.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Colors map[string]*string `json:"colors,omitempty" tf:"colors,omitempty"`

	// (String) URL of logo to display on login page.
	// URL of logo to display on login page.
	// +kubebuilder:validation:Optional
	LogoURL *string `json:"logoUrl,omitempty" tf:"logo_url,omitempty"`
}

type OrganizationInitParameters struct {

	// (Block List, Max: 1) Defines how to style the login pages. (see below for nested schema)
	// Defines how to style the login pages.
	Branding []BrandingInitParameters `json:"branding,omitempty" tf:"branding,omitempty"`

	// (String) Friendly name of this organization.
	// Friendly name of this organization.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Map of String) Metadata associated with the organization. Maximum of 10 metadata properties allowed.
	// Metadata associated with the organization. Maximum of 10 metadata properties allowed.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The name of this organization.
	// The name of this organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OrganizationObservation struct {

	// (Block List, Max: 1) Defines how to style the login pages. (see below for nested schema)
	// Defines how to style the login pages.
	Branding []BrandingObservation `json:"branding,omitempty" tf:"branding,omitempty"`

	// (String) Friendly name of this organization.
	// Friendly name of this organization.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) Metadata associated with the organization. Maximum of 10 metadata properties allowed.
	// Metadata associated with the organization. Maximum of 10 metadata properties allowed.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The name of this organization.
	// The name of this organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OrganizationParameters struct {

	// (Block List, Max: 1) Defines how to style the login pages. (see below for nested schema)
	// Defines how to style the login pages.
	// +kubebuilder:validation:Optional
	Branding []BrandingParameters `json:"branding,omitempty" tf:"branding,omitempty"`

	// (String) Friendly name of this organization.
	// Friendly name of this organization.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Map of String) Metadata associated with the organization. Maximum of 10 metadata properties allowed.
	// Metadata associated with the organization. Maximum of 10 metadata properties allowed.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The name of this organization.
	// The name of this organization.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// OrganizationSpec defines the desired state of Organization
type OrganizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationInitParameters `json:"initProvider,omitempty"`
}

// OrganizationStatus defines the observed state of Organization.
type OrganizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Organization is the Schema for the Organizations API. The Organizations feature represents a broad update to the Auth0 platform that allows our business-to-business (B2B) customers to better manage their partners and customers, and to customize the ways that end-users access their applications. Auth0 customers can use Organizations to: Represent their business customers and partners in Auth0 and manage their membership.Configure branded, federated login flows for each business.Build administration capabilities into their products, using Organizations APIs, so that those businesses can manage their own organizations.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Organization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   OrganizationSpec   `json:"spec"`
	Status OrganizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationList contains a list of Organizations
type OrganizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Organization `json:"items"`
}

// Repository type metadata.
var (
	Organization_Kind             = "Organization"
	Organization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Organization_Kind}.String()
	Organization_KindAPIVersion   = Organization_Kind + "." + CRDGroupVersion.String()
	Organization_GroupVersionKind = CRDGroupVersion.WithKind(Organization_Kind)
)

func init() {
	SchemeBuilder.Register(&Organization{}, &OrganizationList{})
}
