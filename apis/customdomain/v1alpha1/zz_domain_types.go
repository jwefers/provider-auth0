// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainInitParameters struct {

	// (String) The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
	// The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
	CustomClientIPHeader *string `json:"customClientIpHeader,omitempty" tf:"custom_client_ip_header,omitempty"`

	// (String) Name of the custom domain.
	// Name of the custom domain.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) TLS policy for the custom domain. Available options are: compatible or recommended. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
	// TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
	TLSPolicy *string `json:"tlsPolicy,omitempty" tf:"tls_policy,omitempty"`

	// (String) Provisioning type for the custom domain. Options include auth0_managed_certs and self_managed_certs.
	// Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DomainObservation struct {

	// (String) The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
	// The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
	CustomClientIPHeader *string `json:"customClientIpHeader,omitempty" tf:"custom_client_ip_header,omitempty"`

	// (String) Name of the custom domain.
	// Name of the custom domain.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Once the configuration status is ready, the DNS name of the Auth0 origin server that handles traffic for the custom domain.
	// Once the configuration status is `ready`, the DNS name of the Auth0 origin server that handles traffic for the custom domain.
	OriginDomainName *string `json:"originDomainName,omitempty" tf:"origin_domain_name,omitempty"`

	// (Boolean) Indicates whether this is a primary domain.
	// Indicates whether this is a primary domain.
	Primary *bool `json:"primary,omitempty" tf:"primary,omitempty"`

	// (String) Configuration status for the custom domain. Options include disabled, pending, pending_verification, and ready.
	// Configuration status for the custom domain. Options include `disabled`, `pending`, `pending_verification`, and `ready`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String) TLS policy for the custom domain. Available options are: compatible or recommended. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
	// TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
	TLSPolicy *string `json:"tlsPolicy,omitempty" tf:"tls_policy,omitempty"`

	// (String) Provisioning type for the custom domain. Options include auth0_managed_certs and self_managed_certs.
	// Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (List of Object) Configuration settings for verification. (see below for nested schema)
	// Configuration settings for verification.
	Verification []VerificationObservation `json:"verification,omitempty" tf:"verification,omitempty"`
}

type DomainParameters struct {

	// (String) The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
	// The HTTP header to fetch the client's IP address. Cannot be set on auth0_managed domains.
	// +kubebuilder:validation:Optional
	CustomClientIPHeader *string `json:"customClientIpHeader,omitempty" tf:"custom_client_ip_header,omitempty"`

	// (String) Name of the custom domain.
	// Name of the custom domain.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) TLS policy for the custom domain. Available options are: compatible or recommended. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
	// TLS policy for the custom domain. Available options are: `compatible` or `recommended`. Compatible includes TLS 1.0, 1.1, 1.2, and recommended only includes TLS 1.2. Cannot be set on self_managed domains.
	// +kubebuilder:validation:Optional
	TLSPolicy *string `json:"tlsPolicy,omitempty" tf:"tls_policy,omitempty"`

	// (String) Provisioning type for the custom domain. Options include auth0_managed_certs and self_managed_certs.
	// Provisioning type for the custom domain. Options include `auth0_managed_certs` and `self_managed_certs`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VerificationInitParameters struct {
}

type VerificationObservation struct {

	// (List of Map of String)
	Methods []map[string]*string `json:"methods,omitempty" tf:"methods,omitempty"`
}

type VerificationParameters struct {
}

// DomainSpec defines the desired state of Domain
type DomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainInitParameters `json:"initProvider,omitempty"`
}

// DomainStatus defines the observed state of Domain.
type DomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Domain is the Schema for the Domains API. With Auth0, you can use a custom domain to maintain a consistent user experience. This resource allows you to create and manage a custom domain within your Auth0 tenant.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,auth0}
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   DomainSpec   `json:"spec"`
	Status DomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainList contains a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Repository type metadata.
var (
	Domain_Kind             = "Domain"
	Domain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Domain_Kind}.String()
	Domain_KindAPIVersion   = Domain_Kind + "." + CRDGroupVersion.String()
	Domain_GroupVersionKind = CRDGroupVersion.WithKind(Domain_Kind)
)

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
